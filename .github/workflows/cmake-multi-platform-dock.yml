# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on multiple platforms

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Release]
        c_compiler: [gcc, clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl

    steps:
    - uses: actions/checkout@v4

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ github.workspace }}

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest --build-config ${{ matrix.build_type }}

    - name: Install SWI-Prolog
      # You may pin to the exact commit or the version.
      # uses: royratcliffe/swi-prolog-pack-cover@2771b993d739e117e79bac6df60cea2e407dd5f8
      uses: royratcliffe/swi-prolog-pack-cover@v1

    - name: Platform.sh CLI
      # You may pin to the exact commit or the version.
      # uses: Jean-Beru/action-platformsh-cli@48d934c48d6dab707b014ce3dc440c8a3ef30e3a
      uses: Jean-Beru/action-platformsh-cli@v3.60.4
#      with:
        # Platform.sh project ID
#        project: 
        # Command to run
#        command: # optional, default is list

    - name: GitHub Actions environments exporter
      # You may pin to the exact commit or the version.
      # uses: peaceiris/actions-export-envs@fd73ae074de09b2043f696b181a74bb35b51bfa9
      uses: peaceiris/actions-export-envs@v1.1.0
          


    - name: GithubPackages-Docker
      # You may pin to the exact commit or the version.
      # uses: stijnvdkolk/githubpackages-docker@c64052692090e8cee503258fb0474f2fdd291926
      uses: stijnvdkolk/githubpackages-docker@v1.0.4
      with:
        # Access token which is used to deploy the image to the repository. I advise to use GITHUB_TOKEN
        repo-token: GITHUB_TOKEN
        # Name for the docker image
        image-name: github.workspace
          

    - name: Build and publish Docker Image to new GitHub Packages Registry
      # You may pin to the exact commit or the version.
      # uses: DrSkunk/gp-docker-action@96d519ce38c92b59319041ad2a8f80f0e3974d82
      uses: DrSkunk/gp-docker-action@1.1.9
      with:
        # GitHub token to push Docker image to GitHub Packages
        github-token: GITHUB_TOKEN
        # Docker Image name
        image-name: github.workspace
        # Docker Image tag
#        image-tag: # optional, default is latest
        # Extract git-tag from repository
#        extract-git-tag: # optional, default is false
        # Dockerfile name
#        dockerfile: # optional, default is Dockerfile
        # Path to build context
#        build-context: # optional, default is .
        # Pull the image before buiding it
#        pull-image: # optional, default is false
        # Any additional docker build arguments as a string
#        custom-args: # optional, default is 
          
          
          
