<?xml version="1.0"?>
<doc>
    <assembly>
        <name>LAIR.MachineLearning</name>
    </assembly>
    <members>
        <member name="T:LAIR.MachineLearning.ClassifierWrappers.Weka.WekaLogisticRegressionClassifier">
            <summary>
            Logistic regression classifier
            </summary>
        </member>
        <member name="T:LAIR.MachineLearning.ClassifierWrappers.Weka.WekaClassifier">
            <summary>
            Abstract base class for all Weka wrappers
            </summary>
        </member>
        <member name="T:LAIR.MachineLearning.ClassifierWrappers.TwoStageClassifierWrapper">
            <summary>
            Abstract base class for classifier wrappers that operate in a two-stage fashion, where each stage requires a call to an 
            external executable program. These classifiers also make use of a directory to store various data.
            </summary>
        </member>
        <member name="T:LAIR.MachineLearning.Classifier">
            <summary>
            Abstract base class for all classifiers
            </summary>
        </member>
        <member name="M:LAIR.MachineLearning.Classifier.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:LAIR.MachineLearning.Classifier.#ctor(LAIR.MachineLearning.FeatureExtractor)">
            <summary>
            Constructor
            </summary>
            <param name="featureExtractor">Feature extractor to use</param>
        </member>
        <member name="M:LAIR.MachineLearning.Classifier.#ctor(LAIR.MachineLearning.FeatureExtractor,System.Single)">
            <summary>
            Constructor
            </summary>
            <param name="featureExtractor">Feature extractor to use</param>
            <param name="labelConfidenceThreshold">Label confidence threshold, above which labels' confidence scores must be</param>
        </member>
        <member name="M:LAIR.MachineLearning.Classifier.LabelIsValid(System.String)">
            <summary>
            Checks whether or not a label is valid
            </summary>
            <param name="label">Label to check</param>
            <returns>True if label is valid, false otherwise</returns>
        </member>
        <member name="M:LAIR.MachineLearning.Classifier.PreConsumeTrainingVectors">
            <summary>
            Called before the first set of training vectors is consumed
            </summary>
        </member>
        <member name="M:LAIR.MachineLearning.Classifier.ConsumeTrainingVectors(LAIR.MachineLearning.FeatureVectorList)">
            <summary>
            Consumes a list of training vectors
            </summary>
            <param name="featureVectors">Feature vectors to consume</param>
        </member>
        <member name="M:LAIR.MachineLearning.Classifier.PreLearn">
            <summary>
            Called just before learning takes place
            </summary>
        </member>
        <member name="M:LAIR.MachineLearning.Classifier.Learn">
            <summary>
            Learns a classifier from training vectors that have already been consumed with ConsumeTrainingVectors
            </summary>
        </member>
        <member name="M:LAIR.MachineLearning.Classifier.PostLearn">
            <summary>
            Called just after learning process is complete
            </summary>
        </member>
        <member name="M:LAIR.MachineLearning.Classifier.PreClassify(LAIR.MachineLearning.FeatureVectorList)">
            <summary>
            Makes sure list of feature vectors to classify is valid
            </summary>
            <param name="featureVectors">Feature vectors to classify </param>
        </member>
        <member name="M:LAIR.MachineLearning.Classifier.Classify(LAIR.MachineLearning.FeatureVector)">
            <summary>
            Classifies a feature vector
            </summary>
            <param name="featureVector">Feature vector to classify</param>
        </member>
        <member name="M:LAIR.MachineLearning.Classifier.Classify(LAIR.MachineLearning.FeatureVectorList)">
            <summary>
            Classifies a list of feature vectors
            </summary>
            <param name="featureVectors">Feature vectors to classify</param>
        </member>
        <member name="M:LAIR.MachineLearning.Classifier.PostClassify(LAIR.MachineLearning.FeatureVectorList)">
            <summary>
            Removes labels whose scores are below the label confidence threshold
            </summary>
            <param name="featureVectors">Feature vectors that were classified</param>
        </member>
        <member name="P:LAIR.MachineLearning.Classifier.FeatureExtractor">
            <summary>
            Gets or sets the feature extractor used in this classifier
            </summary>
        </member>
        <member name="P:LAIR.MachineLearning.Classifier.TrainingVectorsConsumed">
            <summary>
            Gets the number of training vectors that have been consumed so far
            </summary>
        </member>
        <member name="P:LAIR.MachineLearning.Classifier.LabelConfidenceThreshold">
            <summary>
            Gets or sets the label confidence threshold, above which labels' confidence scores
            must be in order to be added to a feature vector.
            </summary>
        </member>
        <member name="P:LAIR.MachineLearning.Classifier.Labels">
            <summary>
            Gets labels used by this classifier
            </summary>
        </member>
        <member name="M:LAIR.MachineLearning.ClassifierWrappers.TwoStageClassifierWrapper.#ctor(System.String,System.String,System.String,LAIR.MachineLearning.FeatureExtractor,System.Single)">
            <summary>
            Constructor
            </summary>
            <param name="modelDirectory">Directory to store model files in</param>
            <param name="learnExePath">Path to LibLinear learn executable</param>
            <param name="classifyExePath">Path to LibLinear classify executable</param>
            <param name="featureExtractor">Feature extractor to use</param>
            <param name="labelConfidenceThreshold">Confidence threshold for labels</param>
        </member>
        <member name="M:LAIR.MachineLearning.ClassifierWrappers.TwoStageClassifierWrapper.#ctor(System.String,System.String,System.String,LAIR.MachineLearning.FeatureExtractor)">
            <summary>
            Constructor
            </summary>
            <param name="modelDirectory">Directory to store model files in</param>
            <param name="learnExePath">Path to LibLinear learn executable</param>
            <param name="classifyExePath">Path to LibLinear classify executable</param>
            <param name="featureExtractor">Feature extractor to use</param>
        </member>
        <member name="M:LAIR.MachineLearning.ClassifierWrappers.TwoStageClassifierWrapper.GetLearnProcessArguments">
            <summary>
            Gets argument list for invoked learn executable
            </summary>
            <returns>Argument list</returns>
        </member>
        <member name="M:LAIR.MachineLearning.ClassifierWrappers.TwoStageClassifierWrapper.Learn">
            <summary>
            Learns classifier
            </summary>
        </member>
        <member name="M:LAIR.MachineLearning.ClassifierWrappers.TwoStageClassifierWrapper.GetClassifyProcessArguments">
            <summary>
            Gets argument list for invoked classify executable
            </summary>
            <returns>Argument list</returns>
        </member>
        <member name="M:LAIR.MachineLearning.ClassifierWrappers.TwoStageClassifierWrapper.Classify(LAIR.MachineLearning.FeatureVectorList)">
            <summary>
            Classifies a list of feature vectors
            </summary>
            <param name="featureVectors">Feature vectors to classify</param>
        </member>
        <member name="E:LAIR.MachineLearning.ClassifierWrappers.TwoStageClassifierWrapper.BeforeCallingLearnExecutable">
            <summary>
            Fired just before the external learn executable is called
            </summary>
        </member>
        <member name="E:LAIR.MachineLearning.ClassifierWrappers.TwoStageClassifierWrapper.BeforeCallingClassifyExecutable">
            <summary>
            Fired just before the external classify executable is called
            </summary>
        </member>
        <member name="P:LAIR.MachineLearning.ClassifierWrappers.TwoStageClassifierWrapper.LearnExePath">
            <summary>
            Gets the learn executable path
            </summary>
        </member>
        <member name="P:LAIR.MachineLearning.ClassifierWrappers.TwoStageClassifierWrapper.ClassifyExePath">
            <summary>
            Gets the classify executable path
            </summary>
        </member>
        <member name="P:LAIR.MachineLearning.ClassifierWrappers.TwoStageClassifierWrapper.ModelDirectory">
            <summary>
            Gets the directory where model information should be stored
            </summary>
        </member>
        <member name="P:LAIR.MachineLearning.ClassifierWrappers.TwoStageClassifierWrapper.ThrowExceptionOnClassifyError">
            <summary>
            Gets or sets whether or not to throw an exception for any output on standard error when classifying with this classifier (default:  true)
            </summary>
        </member>
        <member name="P:LAIR.MachineLearning.ClassifierWrappers.TwoStageClassifierWrapper.ThrowExceptionOnLearnError">
            <summary>
            Gets or sets whether or not to throw an exception for any output on standard error when learning the classifier (default:  true)
            </summary>
        </member>
        <member name="T:LAIR.MachineLearning.ClassifierWrappers.TwoStageClassifierWrapper.ExternalExecutablePreCallResult">
            <summary>
            Return values for functions that get fired before the external executables are called
            </summary>
        </member>
        <member name="F:LAIR.MachineLearning.ClassifierWrappers.TwoStageClassifierWrapper.ExternalExecutablePreCallResult.Abort">
            <summary>
            Abort the call to the external executable
            </summary>
        </member>
        <member name="F:LAIR.MachineLearning.ClassifierWrappers.TwoStageClassifierWrapper.ExternalExecutablePreCallResult.Continue">
            <summary>
            Continue with the call to the external executable
            </summary>
        </member>
        <member name="T:LAIR.MachineLearning.ClassifierWrappers.TwoStageClassifierWrapper.ExternalExecutablePreCallDelegate">
            <summary>
            Delegate for functions that get fired before the external executables are called
            </summary>
            <returns></returns>
        </member>
        <member name="M:LAIR.MachineLearning.ClassifierWrappers.Weka.WekaClassifier.GetArffHeader(LAIR.MachineLearning.FeatureSpaceRepresentation.MemoryFeatureSpace,LAIR.MachineLearning.LabelMap)">
            <summary>
            Gets the ARFF header for a feature space
            </summary>
            <param name="featureSpace">FeatureSpace to write</param>
            <param name="labelMap">Class labels to write</param>
            <returns>Attribute declaration</returns>
        </member>
        <member name="M:LAIR.MachineLearning.ClassifierWrappers.Weka.WekaClassifier.#ctor(LAIR.MachineLearning.FeatureExtractor,System.String,System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="featureExtractor">Feature extractor to use</param>
            <param name="modelDirectory">Model directory</param>
            <param name="javaExePath">Path to Java executable file</param>
            <param name="wekaJarPath">Path to Weka jar file</param>
        </member>
        <member name="M:LAIR.MachineLearning.ClassifierWrappers.Weka.WekaClassifier.PreConsumeTrainingVectors">
            <summary>
            Clears files from model directory before consuming new training entities
            </summary>
        </member>
        <member name="M:LAIR.MachineLearning.ClassifierWrappers.Weka.WekaClassifier.LabelIsValid(System.String)">
            <summary>
            Checks whether or not a label is valid
            </summary>
            <param name="label">Label to check</param>
            <returns>True if label is valid, false otherwise.</returns>
        </member>
        <member name="M:LAIR.MachineLearning.ClassifierWrappers.Weka.WekaClassifier.ConsumeTrainingVectors(LAIR.MachineLearning.FeatureVectorList)">
            <summary>
            Consumes training vectors
            </summary>
            <param name="vecs">Vectors to consume</param>
        </member>
        <member name="M:LAIR.MachineLearning.ClassifierWrappers.Weka.WekaClassifier.PreLearn">
            <summary>
            Finishes ARFF file
            </summary>
        </member>
        <member name="M:LAIR.MachineLearning.ClassifierWrappers.Weka.WekaClassifier.GetLearnProcessArguments">
            <summary>
            GetLearnProcessArguments override
            </summary>
            <returns></returns>
        </member>
        <member name="M:LAIR.MachineLearning.ClassifierWrappers.Weka.WekaClassifier.PostLearn">
            <summary>
            Cleans up after learn process runs
            </summary>
        </member>
        <member name="M:LAIR.MachineLearning.ClassifierWrappers.Weka.WekaClassifier.PreClassify(LAIR.MachineLearning.FeatureVectorList)">
            <summary>
            Gets ready to classify feature vectors
            </summary>
            <param name="featureVectors">Feature vectors to be classified</param>
        </member>
        <member name="M:LAIR.MachineLearning.ClassifierWrappers.Weka.WekaClassifier.GetClassifyProcessArguments">
            <summary>
            Gets classify process's arguments
            </summary>
            <returns></returns>
        </member>
        <member name="M:LAIR.MachineLearning.ClassifierWrappers.Weka.WekaClassifier.PostClassify(LAIR.MachineLearning.FeatureVectorList)">
            <summary>
            Applies predictions to feature vectors
            </summary>
            <param name="featureVectors">FeatureVectors that were classified</param>
        </member>
        <member name="M:LAIR.MachineLearning.ClassifierWrappers.Weka.WekaClassifier.GetInstanceText(LAIR.MachineLearning.FeatureVector,LAIR.MachineLearning.FeatureSpaceRepresentation.MemoryFeatureSpace)">
            <summary>
            Get text for a feature vector
            </summary>
            <param name="vec">FeatureVector to get text for</param>
            <param name="features">Features to include in text</param>
            <returns>Text for FeatureVector</returns>
        </member>
        <member name="P:LAIR.MachineLearning.ClassifierWrappers.Weka.WekaClassifier.Labels">
            <summary>
            Gets labels used by this classifier
            </summary>
        </member>
        <member name="P:LAIR.MachineLearning.ClassifierWrappers.Weka.WekaClassifier.MultiClass">
            <summary>
            Multi-class strategy to use (default:  None)
            </summary>
        </member>
        <member name="P:LAIR.MachineLearning.ClassifierWrappers.Weka.WekaClassifier.UseServerJVM">
            <summary>
            Whether or not to use the server JVM instead of the client JVM (default:  false)
            </summary>
        </member>
        <member name="P:LAIR.MachineLearning.ClassifierWrappers.Weka.WekaClassifier.PerformCrossValidation">
            <summary>
            Gets or sets whether or not to perform cross validation (default:  false)
            </summary>
        </member>
        <member name="P:LAIR.MachineLearning.ClassifierWrappers.Weka.WekaClassifier.DeleteTrainingFile">
            <summary>
            Gets or sets whether or not to delete the training file after it is used (default:  false)
            </summary>
        </member>
        <member name="P:LAIR.MachineLearning.ClassifierWrappers.Weka.WekaClassifier.WekaJarPath">
            <summary>
            Gets or sets the path to the Weka jar file
            </summary>
        </member>
        <member name="P:LAIR.MachineLearning.ClassifierWrappers.Weka.WekaClassifier.JavaArguments">
            <summary>
            Gets command line arguments for the JVM
            </summary>
        </member>
        <member name="P:LAIR.MachineLearning.ClassifierWrappers.Weka.WekaClassifier.MultiClassArguments">
            <summary>
            Gets multi-class classifier arguments
            </summary>
        </member>
        <member name="P:LAIR.MachineLearning.ClassifierWrappers.Weka.WekaClassifier.MultiClassClass">
            <summary>
            Gets the class for multi-class classification
            </summary>
        </member>
        <member name="P:LAIR.MachineLearning.ClassifierWrappers.Weka.WekaClassifier.ClassifierClass">
            <summary>
            Gets the classifier class
            </summary>
        </member>
        <member name="P:LAIR.MachineLearning.ClassifierWrappers.Weka.WekaClassifier.TrainingInstancesFile">
            <summary>
            Gets the path to the training instances file
            </summary>
        </member>
        <member name="P:LAIR.MachineLearning.ClassifierWrappers.Weka.WekaClassifier.InstancesToClassifyFile">
            <summary>
            Get the path to the classification instances file
            </summary>
        </member>
        <member name="P:LAIR.MachineLearning.ClassifierWrappers.Weka.WekaClassifier.LabelMapFile">
            <summary>
            Gets the file to save label map to
            </summary>
        </member>
        <member name="P:LAIR.MachineLearning.ClassifierWrappers.Weka.WekaClassifier.FeatureNameTransformFile">
            <summary>
            Gets the feature name transform save file
            </summary>
        </member>
        <member name="P:LAIR.MachineLearning.ClassifierWrappers.Weka.WekaClassifier.FeatureSpaceFile">
            <summary>
            Gets the path to the feature space file
            </summary>
        </member>
        <member name="P:LAIR.MachineLearning.ClassifierWrappers.Weka.WekaClassifier.ModelFile">
            <summary>
            Gets the model file
            </summary>
        </member>
        <member name="P:LAIR.MachineLearning.ClassifierWrappers.Weka.WekaClassifier.ModelFiles">
            <summary>
            Gets list of file used in the curren tmodel
            </summary>
        </member>
        <member name="T:LAIR.MachineLearning.ClassifierWrappers.Weka.WekaClassifier.MultiClassStrategy">
            <summary>
            Types of multi-class strategies
            </summary>
        </member>
        <member name="M:LAIR.MachineLearning.ClassifierWrappers.Weka.WekaLogisticRegressionClassifier.#ctor(LAIR.MachineLearning.FeatureExtractor,System.String,System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="featureExtractor">Feature extractor</param>
            <param name="modelDirectory">Model directory</param>
            <param name="javaExePath">Path to Java executable</param>
            <param name="wekaJarPath">Path to Weka jar file</param>
        </member>
        <member name="P:LAIR.MachineLearning.ClassifierWrappers.Weka.WekaLogisticRegressionClassifier.ClassifierClass">
            <summary>
            Gets the logistic regression class
            </summary>
        </member>
        <member name="T:LAIR.MachineLearning.Clustering.Cluto.ClutoFeatureVector">
            <summary>
            Represents a feature vector used by the Cluto toolkit
            </summary>
        </member>
        <member name="T:LAIR.MachineLearning.FeatureVector">
            <summary>
            Represents a sparse vector of features
            </summary>
        </member>
        <member name="M:LAIR.MachineLearning.FeatureVector.#ctor(LAIR.MachineLearning.ClassifiableEntity)">
            <summary>
            Constructor
            </summary>
            <param name="derivedFrom">Entity this vector is derived from</param>
        </member>
        <member name="M:LAIR.MachineLearning.FeatureVector.#ctor(LAIR.MachineLearning.ClassifiableEntity,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="derivedFrom">Entity this vector is derived from</param>
            <param name="numFeatures">Number of features this vector will contain</param>
        </member>
        <member name="M:LAIR.MachineLearning.FeatureVector.Add(LAIR.MachineLearning.Feature,System.Object)">
            <summary>
            Adds a feature/value pair to this vector
            </summary>
            <param name="feature">Feature to add</param>
            <param name="featureValue">Value of feature to add</param>
        </member>
        <member name="M:LAIR.MachineLearning.FeatureVector.Add(LAIR.MachineLearning.FeatureVector)">
            <summary>
            Adds feature/value pairs from a vector to this vector
            </summary>
            <param name="vector">Vector whose feature/value pairs should be added to this one</param>
        </member>
        <member name="M:LAIR.MachineLearning.FeatureVector.Remove(LAIR.MachineLearning.Feature)">
            <summary>
            Removes a feature from this vector
            </summary>
            <param name="feature">Feature to remove</param>
        </member>
        <member name="M:LAIR.MachineLearning.FeatureVector.Contains(LAIR.MachineLearning.Feature)">
            <summary>
            Gets whether or not this feature vector contains a feature
            </summary>
            <param name="feature">Feature to check</param>
            <returns>True if feature is present, false otherwise</returns>
        </member>
        <member name="M:LAIR.MachineLearning.FeatureVector.TryGetValue(LAIR.MachineLearning.Feature,System.Object@)">
            <summary>
            Tries to get a feature value from this vector
            </summary>
            <param name="feature">Feature to get value for</param>
            <param name="value">Value of feature</param>
            <returns>True if value was retrieved, false otherwise</returns>
        </member>
        <member name="M:LAIR.MachineLearning.FeatureVector.Clear">
            <summary>
            Clears all feature/value pairs from this vector
            </summary>
        </member>
        <member name="M:LAIR.MachineLearning.FeatureVector.NormalizeToUnitLength">
            <summary>
            Normalizes the current vector to be of unit length. This only works if all feature values can be casted into floats.
            </summary>
        </member>
        <member name="M:LAIR.MachineLearning.FeatureVector.ToString">
            <summary>
            Gets printable string value of this vector
            </summary>
            <returns></returns>
        </member>
        <member name="M:LAIR.MachineLearning.FeatureVector.RestrictFeatureSpace(LAIR.MachineLearning.FeatureSpaceRepresentation.FeatureSpace,System.Boolean,System.Boolean)">
            <summary>
            Restricts the feature space of this vector to conform with the given feature space. Features in this vector that are 
            not contained in the feature space will be removed. For restrictions on the feature values, see the parameters.
            </summary>
            <param name="featureSpace">Feature space to use</param>
            <param name="requireNominalsInRange">Whether or not to require nominal features in this vector to have values that are
            present in the range of the corresponding feature in the given feature space.</param>
            <param name="requireNumericsInRange">Whether or not to require numeric features in this vector to have values that are
            within the range of the corresponding feature in the given feature space.</param>
        </member>
        <member name="M:LAIR.MachineLearning.FeatureVector.GetEnumerator">
            <summary>
            Gets enumerator over features in this vector
            </summary>
            <returns>Enumerator over features in this vector</returns>
        </member>
        <member name="M:LAIR.MachineLearning.FeatureVector.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets enumerator over features in this vector
            </summary>
            <returns>Enumerator over features in this vector</returns>
        </member>
        <member name="P:LAIR.MachineLearning.FeatureVector.Length">
            <summary>
            Gets the Euclidean length of this vector. All feature values must be castable to floats.
            </summary>
        </member>
        <member name="P:LAIR.MachineLearning.FeatureVector.Item(LAIR.MachineLearning.Feature)">
            <summary>
            Gets the value of a given feature
            </summary>
            <param name="feature">Feature to get value for</param>
            <returns>Value of feature</returns>
        </member>
        <member name="P:LAIR.MachineLearning.FeatureVector.Count">
            <summary>
            Gets number of features in this vector
            </summary>
        </member>
        <member name="P:LAIR.MachineLearning.FeatureVector.Features">
            <summary>
            Gets the collection of features used in this vector
            </summary>
        </member>
        <member name="P:LAIR.MachineLearning.FeatureVector.DerivedFrom">
            <summary>
            Gets or sets the entity from which this feature vector is derived
            </summary>
        </member>
        <member name="M:LAIR.MachineLearning.Clustering.Cluto.ClutoFeatureVector.#ctor(LAIR.MachineLearning.ClassifiableEntity,System.Single,System.Single)">
            <summary>
            Constructor
            </summary>
            <param name="derivedFrom">Entity this vector is derived from</param>
            <param name="internalZScore">Internal z-score</param>
            <param name="externalZScore">External z-score</param>
        </member>
        <member name="P:LAIR.MachineLearning.Clustering.Cluto.ClutoFeatureVector.InternalZScore">
            <summary>
            Gets or sets the internal z-score for this vector
            </summary>
        </member>
        <member name="P:LAIR.MachineLearning.Clustering.Cluto.ClutoFeatureVector.ExternalZScore">
            <summary>
            Gets or sets the external z-score for this vector
            </summary>
        </member>
        <member name="T:LAIR.MachineLearning.Clustering.Cluto.ClutoFeatureVector.InternalZScoreSorter">
            <summary>
            Compares two feature vectors using the values of their internal z-scores
            </summary>
        </member>
        <member name="M:LAIR.MachineLearning.Clustering.Cluto.ClutoFeatureVector.InternalZScoreSorter.Compare(LAIR.MachineLearning.Clustering.Cluto.ClutoFeatureVector,LAIR.MachineLearning.Clustering.Cluto.ClutoFeatureVector)">
            <summary>
            Compares two feature vectors using the values of their internal z-scores
            </summary>
            <param name="x">First vector</param>
            <param name="y">Second vector</param>
            <returns></returns>
        </member>
        <member name="T:LAIR.MachineLearning.Clustering.Cluto.ClutoFeatureVector.ExternalZScoreSorter">
            <summary>
            Compares two feature vectors using the values of their external z-scores
            </summary>
        </member>
        <member name="M:LAIR.MachineLearning.Clustering.Cluto.ClutoFeatureVector.ExternalZScoreSorter.Compare(LAIR.MachineLearning.Clustering.Cluto.ClutoFeatureVector,LAIR.MachineLearning.Clustering.Cluto.ClutoFeatureVector)">
            <summary>
            Compares two feature vectors using the values of their external z-scores
            </summary>
            <param name="x">First vector</param>
            <param name="y">Second vector</param>
            <returns></returns>
        </member>
        <member name="T:LAIR.MachineLearning.Clustering.Cluto.ClutoFeatureVector.ZScoreSorter">
            <summary>
            Compares two feature vectors using a combination of the internal and external z-scores
            </summary>
        </member>
        <member name="M:LAIR.MachineLearning.Clustering.Cluto.ClutoFeatureVector.ZScoreSorter.Compare(LAIR.MachineLearning.Clustering.Cluto.ClutoFeatureVector,LAIR.MachineLearning.Clustering.Cluto.ClutoFeatureVector)">
            <summary>
            Compares two feature vectors using a combination of the internal and external z-scores
            </summary>
            <param name="x">First vector</param>
            <param name="y">Second vector</param>
            <returns></returns>
        </member>
        <member name="T:LAIR.MachineLearning.InstanceProvider">
            <summary>
            Provides instances to classifiers, annotators, etc. - anything that needs a stream of classifiable instances
            </summary>
        </member>
        <member name="M:LAIR.MachineLearning.InstanceProvider.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:LAIR.MachineLearning.InstanceProvider.Start">
            <summary>
            Starts the instance stream
            </summary>
        </member>
        <member name="M:LAIR.MachineLearning.InstanceProvider.GetNextInstance">
            <summary>
            Gets the next instance in the stream
            </summary>
            <returns>Instance</returns>
        </member>
        <member name="M:LAIR.MachineLearning.InstanceProvider.GetPreviousInstance">
            <summary>
            Gets the previous instance in the stream
            </summary>
            <returns>Instance</returns>
        </member>
        <member name="P:LAIR.MachineLearning.InstanceProvider.CurrentInstanceNumber">
            <summary>
            Gets the zero-based number of the current instance
            </summary>
        </member>
        <member name="P:LAIR.MachineLearning.InstanceProvider.Count">
            <summary>
            Gets the total number of instances available
            </summary>
        </member>
        <member name="P:LAIR.MachineLearning.InstanceProvider.Remaining">
            <summary>
            Gets the number of instance remaining
            </summary>
        </member>
        <member name="P:LAIR.MachineLearning.InstanceProvider.HasAnotherInstance">
            <summary>
            Gets whether or not there is another instance available
            </summary>
        </member>
        <member name="P:LAIR.MachineLearning.InstanceProvider.HasPreviousInstance">
            <summary>
            Gets whether or not there is a previous instance
            </summary>
        </member>
        <member name="P:LAIR.MachineLearning.InstanceProvider.CurrentInstance">
            <summary>
            Gets the current training instance
            </summary>
        </member>
        <member name="T:LAIR.MachineLearning.ClassifierWrappers.MaxEnt.MaxEntClassifierClient">
            <summary>
            Maximum entropy classifier client
            </summary>
        </member>
        <member name="M:LAIR.MachineLearning.ClassifierWrappers.MaxEnt.MaxEntClassifierClient.#ctor(LAIR.MachineLearning.FeatureExtractor,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="featureExtractor">Feature extractor to use</param>
            <param name="modelDirectory">Model directory</param>
            <param name="host">Host running MaxEnt server</param>
            <param name="learnPort">Port on which models are built</param>
            <param name="classifyPort">Port on which classifications are served</param>
        </member>
        <member name="M:LAIR.MachineLearning.ClassifierWrappers.MaxEnt.MaxEntClassifierClient.GetInstanceText(LAIR.MachineLearning.FeatureVector)">
            <summary>
            Gets instance text for a feature vector
            </summary>
            <param name="vec"></param>
            <returns></returns>
        </member>
        <member name="M:LAIR.MachineLearning.ClassifierWrappers.MaxEnt.MaxEntClassifierClient.ConsumeTrainingVectors(LAIR.MachineLearning.FeatureVectorList)">
            <summary>
            Consumes training vectors
            </summary>
            <param name="vecs">Vectors to consume</param>
        </member>
        <member name="M:LAIR.MachineLearning.ClassifierWrappers.MaxEnt.MaxEntClassifierClient.Learn">
            <summary>
            Learns MaxEnt model from training feature vectors
            </summary>
        </member>
        <member name="M:LAIR.MachineLearning.ClassifierWrappers.MaxEnt.MaxEntClassifierClient.Classify(LAIR.MachineLearning.FeatureVectorList)">
            <summary>
            Classifies a list of feature vectors
            </summary>
            <param name="featureVectors">Feature vectors to classify</param>
        </member>
        <member name="M:LAIR.MachineLearning.ClassifierWrappers.MaxEnt.MaxEntClassifierClient.LabelIsValid(System.String)">
            <summary>
            Checks whether or not a label is valid
            </summary>
            <param name="label">Label to check</param>
            <returns>True if label is valid, false otherwise</returns>
        </member>
        <member name="P:LAIR.MachineLearning.ClassifierWrappers.MaxEnt.MaxEntClassifierClient.Labels">
            <summary>
            Gets labels used by this classifier
            </summary>
        </member>
        <member name="P:LAIR.MachineLearning.ClassifierWrappers.MaxEnt.MaxEntClassifierClient.LabelMapFile">
            <summary>
            Gets the file to save label map to
            </summary>
        </member>
        <member name="P:LAIR.MachineLearning.ClassifierWrappers.MaxEnt.MaxEntClassifierClient.FeatureNameTransformFile">
            <summary>
            Gets the feature name transform save file
            </summary>
        </member>
        <member name="P:LAIR.MachineLearning.ClassifierWrappers.MaxEnt.MaxEntClassifierClient.FeatureSpaceFile">
            <summary>
            Gets the path to the feature space file
            </summary>
        </member>
        <member name="P:LAIR.MachineLearning.ClassifierWrappers.MaxEnt.MaxEntClassifierClient.ModelDirectory">
            <summary>
            Gets or sets the directory where model information should be stored. This classifier exerts full control over this
            directoy, so don't put anything in there that you don't mind having deleted.
            </summary>
        </member>
        <member name="P:LAIR.MachineLearning.ClassifierWrappers.MaxEnt.MaxEntClassifierClient.Host">
            <summary>
            Gets or sets the host
            </summary>
        </member>
        <member name="P:LAIR.MachineLearning.ClassifierWrappers.MaxEnt.MaxEntClassifierClient.LearnPort">
            <summary>
            Gets or sets the port
            </summary>
        </member>
        <member name="P:LAIR.MachineLearning.ClassifierWrappers.MaxEnt.MaxEntClassifierClient.ClassifyPort">
            <summary>
            Gets or sets the port on which classifications are served
            </summary>
        </member>
        <member name="T:LAIR.MachineLearning.ClassifierWrappers.SvmLight.SvmLightFeatureVectorReader">
            <summary>
            Reads SvmLight-style feature vector text files
            </summary>
        </member>
        <member name="T:LAIR.MachineLearning.FeatureVectorReader">
            <summary>
            Reads FeatureVectorStrings from a text file
            </summary>
        </member>
        <member name="M:LAIR.MachineLearning.FeatureVectorReader.GetVectors(System.String)">
            <summary>
            Gets vectors from a file
            </summary>
            <param name="path">Path to file</param>
            <returns>List of vectors</returns>
        </member>
        <member name="M:LAIR.MachineLearning.ClassifierWrappers.SvmLight.SvmLightFeatureVectorReader.GetVectors(System.String)">
            <summary>
            Gets feature vectors from a file
            </summary>
            <param name="path">Path to file from which to get vectors</param>
            <returns>List of feature vectors</returns>
        </member>
        <member name="T:LAIR.MachineLearning.ClassifierWrappers.LibLinear.LibLinearClassifierClient">
            <summary>
            Provides access to LibLinear classifier server
            </summary>
        </member>
        <member name="T:LAIR.MachineLearning.ClassifierWrappers.NumberedFeatureClassifierClient">
            <summary>
            Abstract base class for numbered feature classifier clients
            </summary>
        </member>
        <member name="M:LAIR.MachineLearning.ClassifierWrappers.NumberedFeatureClassifierClient.#ctor(LAIR.MachineLearning.FeatureNameTransformation.NumericFeatureNameTransform.AccessMethod,LAIR.MachineLearning.FeatureSpaceRepresentation.FeatureSpace.AccessMethod,System.Boolean,System.String,LAIR.MachineLearning.FeatureExtractor,System.Single)">
            <summary>
            Constructor
            </summary>
            <param name="featureNameTransformAccessMethod">Method of access to use for feature name transform</param>
            <param name="featureSpaceAccessMethod">Method of access to use for feature space</param>
            <param name="scaleNumericFeatureValues">Whether or not to scale numeric feature values when classifying feature vectors</param>
            <param name="modelDirectory">Model directory for this client. This directory must have a file named connection_params in it, 
            which has two lines. The first gives the host address, the second gives the host port.</param>
            <param name="featureExtractor">Feature extractor to use</param>
            <param name="labelConfidenceThreshold">Label confidence threshold</param>
        </member>
        <member name="M:LAIR.MachineLearning.ClassifierWrappers.NumberedFeatureClassifierClient.Classify(LAIR.MachineLearning.FeatureVectorList)">
            <summary>
            Classifies a list of feature vectors at the remote server
            </summary>
            <param name="featureVectors">Feature vectors to classify</param>
        </member>
        <member name="M:LAIR.MachineLearning.ClassifierWrappers.NumberedFeatureClassifierClient.PreClassify(LAIR.MachineLearning.FeatureVectorList)">
            <summary>
            Writes feature vectors to classify server
            </summary>
            <param name="featureVectors">Feature vectors to be classified</param>
        </member>
        <member name="M:LAIR.MachineLearning.ClassifierWrappers.NumberedFeatureClassifierClient.PostClassify(LAIR.MachineLearning.FeatureVectorList)">
            <summary>
            Reads predictions from server
            </summary>
            <param name="featureVectors">Feature vectors that have been classified at server</param>
        </member>
        <member name="M:LAIR.MachineLearning.ClassifierWrappers.NumberedFeatureClassifierClient.ApplyPredictions(LAIR.MachineLearning.FeatureVectorList)">
            <summary>
            Applies predictions to feature vectors
            </summary>
            <param name="featureVectors">Feature vectors to apply predictions to</param>
        </member>
        <member name="M:LAIR.MachineLearning.ClassifierWrappers.NumberedFeatureClassifierClient.GetInstanceText(LAIR.MachineLearning.FeatureVector)">
            <summary>
            Gets textual representation of feature vector
            </summary>
            <param name="vector">Feature vector to get text for</param>
            <returns>Feature vector text</returns>
        </member>
        <member name="M:LAIR.MachineLearning.ClassifierWrappers.NumberedFeatureClassifierClient.GetMappedLabel(System.String)">
            <summary>
            Gets mapped label for an unmapped label
            </summary>
            <param name="unmappedLabel">Unmapped label to get mapped label for</param>
            <returns>Mapped label</returns>
        </member>
        <member name="M:LAIR.MachineLearning.ClassifierWrappers.NumberedFeatureClassifierClient.LabelIsValid(System.String)">
            <summary>
            Checks whether or not a label is valid
            </summary>
            <param name="label">Label to check</param>
            <returns>True if label is valid, false otherwise</returns>
        </member>
        <member name="M:LAIR.MachineLearning.ClassifierWrappers.NumberedFeatureClassifierClient.Learn">
            <summary>
            Not implemented
            </summary>
        </member>
        <member name="P:LAIR.MachineLearning.ClassifierWrappers.NumberedFeatureClassifierClient.ConnectionParamsFileName">
            <summary>
            Gets the name of the file that stores the connection parameters
            </summary>
        </member>
        <member name="P:LAIR.MachineLearning.ClassifierWrappers.NumberedFeatureClassifierClient.FeatureNameTransformPath">
            <summary>
            Gets the path to the feature name transform
            </summary>
        </member>
        <member name="P:LAIR.MachineLearning.ClassifierWrappers.NumberedFeatureClassifierClient.FeatureSpacePath">
            <summary>
            Gets the path to the feature space file
            </summary>
        </member>
        <member name="P:LAIR.MachineLearning.ClassifierWrappers.NumberedFeatureClassifierClient.LabelMapPath">
            <summary>
            Gets the path to the label map file
            </summary>
        </member>
        <member name="P:LAIR.MachineLearning.ClassifierWrappers.NumberedFeatureClassifierClient.LabelMap">
            <summary>
            Gets the label map
            </summary>
        </member>
        <member name="P:LAIR.MachineLearning.ClassifierWrappers.NumberedFeatureClassifierClient.ModelDirectory">
            <summary>
            Gets the model directory
            </summary>
        </member>
        <member name="P:LAIR.MachineLearning.ClassifierWrappers.NumberedFeatureClassifierClient.ConnectionParamsPath">
            <summary>
            Gets the path to the connection parameters file
            </summary>
        </member>
        <member name="P:LAIR.MachineLearning.ClassifierWrappers.NumberedFeatureClassifierClient.PredictionsPath">
            <summary>
            Gets the path to the model file
            </summary>
        </member>
        <member name="P:LAIR.MachineLearning.ClassifierWrappers.NumberedFeatureClassifierClient.Labels">
            <summary>
            Gets labels used by this classifier
            </summary>
        </member>
        <member name="M:LAIR.MachineLearning.ClassifierWrappers.LibLinear.LibLinearClassifierClient.CreateServerStartupScript(System.String,System.String,System.Int32)">
            <summary>
            Creates a LibLinear classification server startup script, and leaves LibLinear client connection parameter files in each directory
            </summary>
            <param name="parentDirectory">Parent directory, to be searched recursively for model files. The startup script is created in
            this directory</param>
            <param name="host">LibLinear classify server host</param>
            <param name="basePort">Base port number for the LibLinear classify server</param>
        </member>
        <member name="M:LAIR.MachineLearning.ClassifierWrappers.LibLinear.LibLinearClassifierClient.CreateServerStartupScriptRecursive(System.String,System.String,System.Int32@,System.String,System.String)">
            <summary>
            Creates a LibLinear classification server startup script, and leaves LibLinear client connection parameters in each directory
            </summary>
            <param name="modelDirectory">Directory to be searched recursively for model files</param>
            <param name="host">LibLinear classify server host</param>
            <param name="basePort">Base port number</param>
            <param name="modelParentDirectory">Path to the parent directory of all model directories</param>
            <param name="startupScriptPath">Path to startup script</param>
            <returns>True if any entries were added to the startup script</returns>
        </member>
        <member name="M:LAIR.MachineLearning.ClassifierWrappers.LibLinear.LibLinearClassifierClient.#ctor(System.Boolean,LAIR.MachineLearning.FeatureNameTransformation.NumericFeatureNameTransform.AccessMethod,LAIR.MachineLearning.FeatureSpaceRepresentation.FeatureSpace.AccessMethod,System.Boolean,System.String,LAIR.MachineLearning.FeatureExtractor,System.Single)">
            <summary>
            Constructor
            </summary>
            <param name="outputProbabilities">Whether or not the server will output probabilities</param>
            <param name="featureNameTransformAccessMethod">Method of access to use for feature name transform</param>
            <param name="featureSpaceAccessMethod">Method of access to use for feature space</param>
            <param name="scaleNumericFeatureValues">Whether or not to scale numeric feature values when classifying feature vectors</param>
            <param name="modelDirectory">Model directory for this client. This directory must have a file named liblinear_client_params in it, 
            which has two lines. The first gives the host address, the second gives the host port.</param>
            <param name="featureExtractor">Feature extractor to use</param>
            <param name="labelConfidenceThreshold">Label confidence threshold</param>
        </member>
        <member name="M:LAIR.MachineLearning.ClassifierWrappers.LibLinear.LibLinearClassifierClient.ApplyPredictions(LAIR.MachineLearning.FeatureVectorList)">
            <summary>
            Applies current predictions to a list of feature vectors
            </summary>
            <param name="featureVectors">Feature vectors to apply predictions to</param>
        </member>
        <member name="P:LAIR.MachineLearning.ClassifierWrappers.LibLinear.LibLinearClassifierClient.OutputProbabilities">
            <summary>
            Gets or sets whether or not the server will output probabilities
            </summary>
        </member>
        <member name="T:LAIR.MachineLearning.FeatureNameSorter">
            <summary>
            Sorts features by name
            </summary>
        </member>
        <member name="M:LAIR.MachineLearning.FeatureNameSorter.Compare(LAIR.MachineLearning.Feature,LAIR.MachineLearning.Feature)">
            <summary>
            Compares two features by name
            </summary>
            <param name="x">First feature</param>
            <param name="y">Second feature</param>
            <returns>-1 if x comes before y, 1 if x comes after y, and 0 otherwise</returns>
        </member>
        <member name="T:LAIR.MachineLearning.ClassifierWrappers.LibLinear.LibLinearFeatureVectorStringFEX">
            <summary>
            Extracts features from FeatureVectorStrings that are in LibLinear format
            </summary>
        </member>
        <member name="T:LAIR.MachineLearning.FeatureExtractor">
            <summary>
            Abstract base class for classes that extract feature vectors from classifiable entities
            </summary>
        </member>
        <member name="M:LAIR.MachineLearning.FeatureExtractor.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="abbreviatedFeatureNames">Whether or not to use abbreviated feature names</param>
            <param name="abbreviatedFeatureValues">Whether or not to use abbreviated feature values</param>
        </member>
        <member name="M:LAIR.MachineLearning.FeatureExtractor.GetFeatureVector(LAIR.MachineLearning.ClassifiableEntity,System.Int32)">
            <summary>
            Gets a feature vector for a single entity
            </summary>
            <param name="entity">Entity to get feature vector for</param>
            <param name="featuresPerEntity">Number of features that might be extracted for an entity</param>
            <returns>Feature vector</returns>
        </member>
        <member name="M:LAIR.MachineLearning.FeatureExtractor.GetFeatureVectors(LAIR.MachineLearning.ClassifiableEntityList,System.Int32)">
            <summary>
            Gets feature vectors for a list of entities
            </summary>
            <param name="entities">Entities to process</param>
            <param name="featuresPerEntity">Number of features that might be extracted for an entity</param>
            <returns>List of feature vectors</returns>
        </member>
        <member name="M:LAIR.MachineLearning.FeatureExtractor.GetFeatureVectors(LAIR.MachineLearning.ClassifiableEntityList)">
            <summary>
            Gets feature vectors for a list of entities
            </summary>
            <param name="entities">Entities to process</param>
            <returns>List of feature vectors</returns>
        </member>
        <member name="P:LAIR.MachineLearning.FeatureExtractor.AbbreviatedFeatureValues">
            <summary>
            Gets or sets whether or not to use abbreviated feature values instead of full-length values
            </summary>
        </member>
        <member name="P:LAIR.MachineLearning.FeatureExtractor.AbbreviatedFeatureNames">
            <summary>
            Gets or sets whether or not to use abbreviated feature names instead of the full names
            </summary>
        </member>
        <member name="M:LAIR.MachineLearning.ClassifierWrappers.LibLinear.LibLinearFeatureVectorStringFEX.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:LAIR.MachineLearning.ClassifierWrappers.LibLinear.LibLinearFeatureVectorStringFEX.GetFeatureVector(LAIR.MachineLearning.ClassifiableEntity,System.Int32)">
            <summary>
            Gets a FeatureVector from a FeatureVectorString object
            </summary>
            <param name="entity">Entity to get feature vector from</param>
            <param name="featuresPerEntity">Features per entity</param>
            <returns>FeatureVector</returns>
        </member>
        <member name="T:LAIR.MachineLearning.LabelMap">
            <summary>
            Maps class labels to a form usable by a classifier
            </summary>
        </member>
        <member name="M:LAIR.MachineLearning.LabelMap.#ctor(LAIR.MachineLearning.LabelMap.Mapping)">
            <summary>
            Constructor. The resulting LabelMap will be unlocked.
            </summary>
            <param name="mapping">Type of mapping to perform</param>
        </member>
        <member name="M:LAIR.MachineLearning.LabelMap.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="path">Path to saved label map</param>
        </member>
        <member name="M:LAIR.MachineLearning.LabelMap.AddLabelMapping(System.String,System.String)">
            <summary>
            Adds a mapping
            </summary>
            <param name="unmappedLabel">Unmapped label</param>
            <param name="mappedLabel">Mapped label</param>
        </member>
        <member name="M:LAIR.MachineLearning.LabelMap.GetMappedLabel(System.String)">
            <summary>
            Gets the mapped label for an unmapped label
            </summary>
            <param name="unmappedLabel">Label to get mapped label for</param>
            <returns>Mapped label</returns>
        </member>
        <member name="M:LAIR.MachineLearning.LabelMap.GetUnmappedLabel(System.String)">
            <summary>
            Gets unmapped label for a mapped label
            </summary>
            <param name="mappedLabel">Mapped label to get unmapped label for</param>
            <returns>Unmapped label</returns>
        </member>
        <member name="M:LAIR.MachineLearning.LabelMap.Save(System.String)">
            <summary>
            Saves this map to disk
            </summary>
            <param name="path">Where to write map to</param>
        </member>
        <member name="M:LAIR.MachineLearning.LabelMap.Clear">
            <summary>
            Clears this label map
            </summary>
        </member>
        <member name="M:LAIR.MachineLearning.LabelMap.ContainsMappedLabelFor(System.String)">
            <summary>
            Checks whether this map contains a mapped label for a given unmapped label
            </summary>
            <param name="unmappedLabel">Label to check for</param>
            <returns>True if such a label exists, false otherwise</returns>
        </member>
        <member name="P:LAIR.MachineLearning.LabelMap.Locked">
            <summary>
            Gets or sets whether or not this LabelMap is locked (default:  false)
            </summary>
        </member>
        <member name="P:LAIR.MachineLearning.LabelMap.UnmappedLabels">
            <summary>
            Gets unmapped labels
            </summary>
        </member>
        <member name="P:LAIR.MachineLearning.LabelMap.MappedLabels">
            <summary>
            Gets mapped labels
            </summary>
        </member>
        <member name="T:LAIR.MachineLearning.LabelMap.Mapping">
            <summary>
            Mapping types
            </summary>
        </member>
        <member name="F:LAIR.MachineLearning.LabelMap.Mapping.None">
            <summary>
            Perform no mapping. Directly use the given label.
            </summary>
        </member>
        <member name="F:LAIR.MachineLearning.LabelMap.Mapping.OneBasedIncreasingInteger">
            <summary>
            Map labels to 1-based increasing integers
            </summary>
        </member>
        <member name="T:LAIR.MachineLearning.FeatureSpaceRepresentation.BinarySearchFeatureSpace">
            <summary>
            Represents a feature space that can be searched using a binary search over a file. This is a read-only feature space.
            </summary>
        </member>
        <member name="T:LAIR.MachineLearning.FeatureSpaceRepresentation.DiskBasedFeatureSpace">
            <summary>
            Provides disk-based access to a feature space. Creates an auxiliary file that maps feature names to their ranges - numerical
            ranges in the case of numerical features, and byte ranges in the case of nominals features, where the byte range specifies
            a portion of the feature space file to search for the feature value.
            </summary>
        </member>
        <member name="T:LAIR.MachineLearning.FeatureSpaceRepresentation.FeatureSpace">
            <summary>
            Represents a feature spaces that FeatureVectors reside in
            </summary>
        </member>
        <member name="M:LAIR.MachineLearning.FeatureSpaceRepresentation.FeatureSpace.Condense(System.String)">
            <summary>
            Condenses a feature space file. When multiple feature spaces are appended to the same file, the same feature can be listed
            multiple times. This results in redundancies, especially in the nominal features whose ranges can overlap quite a bit.
            </summary>
            <param name="path">Feature space file to condense</param>
            <returns>Reference to the condensed feature space</returns>
        </member>
        <member name="M:LAIR.MachineLearning.FeatureSpaceRepresentation.FeatureSpace.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:LAIR.MachineLearning.FeatureSpaceRepresentation.FeatureSpace.Clear">
            <summary>
            Clears this feature space
            </summary>
        </member>
        <member name="M:LAIR.MachineLearning.FeatureSpaceRepresentation.FeatureSpace.Contains(LAIR.MachineLearning.Feature)">
            <summary>
            Gets whether or not this space contains a feature
            </summary>
        </member>
        <member name="M:LAIR.MachineLearning.FeatureSpaceRepresentation.FeatureSpace.Contains(LAIR.MachineLearning.Feature,System.Object)">
            <summary>
            Gets whether or not this space contains a feature/value pair
            </summary>
            <param name="feature">Feature to check</param>
            <param name="featureValue">Value to check</param>
            <returns>True if feature/value pair is present, false otherwise</returns>
        </member>
        <member name="M:LAIR.MachineLearning.FeatureSpaceRepresentation.FeatureSpace.GetNumericFeatureValueRange(LAIR.MachineLearning.NumericFeature,System.Single@,System.Single@)">
            <summary>
            Gets the range of a numeric feature value
            </summary>
            <param name="numericFeature">Numeric feature to get range for</param>
            <param name="rangeMinimum">Minimum value of range</param>
            <param name="rangeMaximum">Maximum value of range</param>
        </member>
        <member name="M:LAIR.MachineLearning.FeatureSpaceRepresentation.FeatureSpace.GetScaledNumericFeatureValue(LAIR.MachineLearning.NumericFeature,System.Single)">
            <summary>
            Scales a numeric feature value to be within [0,1]. This isn't guaranteed, as the given feature value might be outside
            the range defined in this space, in which case the value might be negative or greater than 1.
            </summary>
            <param name="numericFeature">Numeric feature to scale</param>
            <param name="featureValue">Value to scale</param>
            <returns>Scaled value</returns>
        </member>
        <member name="P:LAIR.MachineLearning.FeatureSpaceRepresentation.FeatureSpace.Locked">
            <summary>
            Gets or sets whether or not this feature space is locked (default:  false)
            </summary>
        </member>
        <member name="P:LAIR.MachineLearning.FeatureSpaceRepresentation.FeatureSpace.Count">
            <summary>
            Gets number of features in this space
            </summary>
        </member>
        <member name="T:LAIR.MachineLearning.FeatureSpaceRepresentation.FeatureSpace.AccessMethod">
            <summary>
            Access methods
            </summary>
        </member>
        <member name="F:LAIR.MachineLearning.FeatureSpaceRepresentation.FeatureSpace.AccessMethod.Memory">
            <summary>
            In-memory access
            </summary>
        </member>
        <member name="F:LAIR.MachineLearning.FeatureSpaceRepresentation.FeatureSpace.AccessMethod.HashSearch">
            <summary>
            Hash search-based access
            </summary>
        </member>
        <member name="F:LAIR.MachineLearning.FeatureSpaceRepresentation.FeatureSpace.AccessMethod.BinarySearch">
            <summary>
            Binary search-based access
            </summary>
        </member>
        <member name="M:LAIR.MachineLearning.FeatureSpaceRepresentation.DiskBasedFeatureSpace.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:LAIR.MachineLearning.FeatureSpaceRepresentation.DiskBasedFeatureSpace.CreateFeatureRangeFile(System.String,System.Boolean)">
            <summary>
            Creates an auxiliary file that maps feature names to their ranges - numerical ranges in the case of numerical features, 
            and byte ranges in the case of nominals features, where the byte range specifies a portion of the feature space file to 
            search for the feature value.
            </summary>
            <param name="featureSpacePath">Path to feature space for which to create range file</param>
            <param name="sortedRangeFile">Whether or not to create a range file in which the feature names are sorted. This is required, 
            for example, in the case of binary searches over ordered data</param>
            <returns>Path to range file that was created</returns>
        </member>
        <member name="M:LAIR.MachineLearning.FeatureSpaceRepresentation.DiskBasedFeatureSpace.Contains(LAIR.MachineLearning.Feature)">
            <summary>
            Gets whether or not this space contains a feature
            </summary>
            <param name="feature">Feature to check for</param>
            <returns>True if feature is contained, false otherwise</returns>
        </member>
        <member name="M:LAIR.MachineLearning.FeatureSpaceRepresentation.DiskBasedFeatureSpace.Contains(LAIR.MachineLearning.Feature,System.Object)">
            <summary>
            Gets whether or not this feature space contains a feature/value pair
            </summary>
            <param name="feature">Feature to check</param>
            <param name="featureValue">Value of feature</param>
            <returns>True if feature/value pair is not present</returns>
        </member>
        <member name="M:LAIR.MachineLearning.FeatureSpaceRepresentation.DiskBasedFeatureSpace.GetSearchValuePrefix(LAIR.MachineLearning.Feature)">
            <summary>
            Gets the search value prefix for a feature-value query
            </summary>
            <param name="feature">Feature to get prefix for</param>
            <returns>Search value prefix for a feature-value query</returns>
        </member>
        <member name="M:LAIR.MachineLearning.FeatureSpaceRepresentation.DiskBasedFeatureSpace.Clear">
            <summary>
            Closes the feature space file
            </summary>
        </member>
        <member name="M:LAIR.MachineLearning.FeatureSpaceRepresentation.DiskBasedFeatureSpace.GetNumericFeatureValueRange(LAIR.MachineLearning.NumericFeature,System.Single@,System.Single@)">
            <summary>
            Gets the range of a numeric feature value
            </summary>
            <param name="numericFeature">Numeric feature to get range for</param>
            <param name="rangeMinimum">Minimum value of range</param>
            <param name="rangeMaximum">Maximum value of range</param>
        </member>
        <member name="P:LAIR.MachineLearning.FeatureSpaceRepresentation.DiskBasedFeatureSpace.FeatureSpaceSearch">
            <summary>
            Gets or sets the feature space search
            </summary>
        </member>
        <member name="P:LAIR.MachineLearning.FeatureSpaceRepresentation.DiskBasedFeatureSpace.FeatureRangeSearch">
            <summary>
            Gets or sets the feature range search
            </summary>
        </member>
        <member name="P:LAIR.MachineLearning.FeatureSpaceRepresentation.DiskBasedFeatureSpace.Count">
            <summary>
            Gets the number of features in this feature space
            </summary>
        </member>
        <member name="P:LAIR.MachineLearning.FeatureSpaceRepresentation.DiskBasedFeatureSpace.Locked">
            <summary>
            Gets whether or not the feature space is locked (always true, cannot be set to false)
            </summary>
        </member>
        <member name="M:LAIR.MachineLearning.FeatureSpaceRepresentation.BinarySearchFeatureSpace.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="path">Path to feature space file that is to be searched</param>
        </member>
        <member name="M:LAIR.MachineLearning.FeatureSpaceRepresentation.BinarySearchFeatureSpace.GetSearchValuePrefix(LAIR.MachineLearning.Feature)">
            <summary>
            The binary search feature space does not need to do feature-value prefixing because it does not do any tricky
            indexing of feature values. It simply conducts a binary search for a feature value within a byte range. This
            function always returns the empty string.
            </summary>
            <param name="feature">Feature to get prefix for</param>
            <returns>Empty string</returns>
        </member>
        <member name="T:LAIR.MachineLearning.FeatureNameTransformation.NumericFeatureNameTransform">
            <summary>
            Transforms string feature names to numeric feature names. Some classification frameworks only work with numeric features names,
            so we must have a method of transforming string names to numeric names.
            </summary>
        </member>
        <member name="M:LAIR.MachineLearning.FeatureNameTransformation.NumericFeatureNameTransform.#ctor(System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="locked">Whether or not transform is locked</param>
        </member>
        <member name="M:LAIR.MachineLearning.FeatureNameTransformation.NumericFeatureNameTransform.GetFeatureNumber(System.String)">
            <summary>
            Gets the number associated with a feature name
            </summary>
            <param name="featureName">Name of feature to get number for</param>
            <returns>Number of feature</returns>
        </member>
        <member name="M:LAIR.MachineLearning.FeatureNameTransformation.NumericFeatureNameTransform.Clear">
            <summary>
            Clears this transform
            </summary>
        </member>
        <member name="M:LAIR.MachineLearning.FeatureNameTransformation.NumericFeatureNameTransform.Save(System.String)">
            <summary>
            Saves this transform to disk
            </summary>
        </member>
        <member name="P:LAIR.MachineLearning.FeatureNameTransformation.NumericFeatureNameTransform.Locked">
            <summary>
            Gets or sets whether or not this transform is locked (default:  false)
            </summary>
        </member>
        <member name="T:LAIR.MachineLearning.FeatureNameTransformation.NumericFeatureNameTransform.AccessMethod">
            <summary>
            Available acess methods
            </summary>
        </member>
        <member name="F:LAIR.MachineLearning.FeatureNameTransformation.NumericFeatureNameTransform.AccessMethod.Memory">
            <summary>
            All data is stored in memory
            </summary>
        </member>
        <member name="F:LAIR.MachineLearning.FeatureNameTransformation.NumericFeatureNameTransform.AccessMethod.HashSearch">
            <summary>
            Feature name hashes are stored in memory, but numeric values are on disk
            </summary>
        </member>
        <member name="F:LAIR.MachineLearning.FeatureNameTransformation.NumericFeatureNameTransform.AccessMethod.BinarySearch">
            <summary>
            Nothing is stored in memory - the transform file is searched using a binary search
            </summary>
        </member>
        <member name="T:LAIR.MachineLearning.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:LAIR.MachineLearning.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:LAIR.MachineLearning.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="T:LAIR.MachineLearning.HiddenMarkovModeling.HmmNode">
            <summary>
            Represents a node in an HMM lattice
            </summary>
        </member>
        <member name="M:LAIR.MachineLearning.HiddenMarkovModeling.HmmNode.#ctor(System.Int32,System.Int32,LAIR.MachineLearning.HiddenMarkovModeling.HmmNode[],LAIR.MachineLearning.HiddenMarkovModeling.HMM)">
            <summary>
            Constructor
            </summary>
            <param name="state">State of node</param>
            <param name="time">Time of node</param>
            <param name="previousNodes">Previous nodes in lattice</param>
            <param name="hmm">HMM this node is part of</param>
        </member>
        <member name="M:LAIR.MachineLearning.HiddenMarkovModeling.HmmNode.GetScoreFromPreviousNodes(LAIR.MachineLearning.HiddenMarkovModeling.HmmNode.ScoringMethod)">
            <summary>
            Gets score by iterating over previous HMM nodes
            </summary>
            <param name="scoreMethod">Scoring method</param>
            <returns>Score</returns>
        </member>
        <member name="M:LAIR.MachineLearning.HiddenMarkovModeling.HmmNode.DecodeNodeInState(System.Int32)">
            <summary>
            Decodes the nearest previous node (possibly the current node) that is in the given state. 
            </summary>
            <param name="state">State of node to get</param>
            <returns>HMM node</returns>
        </member>
        <member name="M:LAIR.MachineLearning.HiddenMarkovModeling.HmmNode.DecodeStateSequence">
            <summary>
            Decodes the most likely state sequence leading to (and including) the current node
            </summary>
            <returns></returns>
        </member>
        <member name="M:LAIR.MachineLearning.HiddenMarkovModeling.HmmNode.ToString">
            <summary>
            Gets string description of state
            </summary>
            <returns></returns>
        </member>
        <member name="P:LAIR.MachineLearning.HiddenMarkovModeling.HmmNode.PreviousNodes">
            <summary>
            Gets the nodes from the previous time step that can transition to the current one
            </summary>
        </member>
        <member name="P:LAIR.MachineLearning.HiddenMarkovModeling.HmmNode.ForwardProbability">
            <summary>
            Gets or sets the forward probability. Set only valid for initial nodes, and can only be called once.
            </summary>
        </member>
        <member name="P:LAIR.MachineLearning.HiddenMarkovModeling.HmmNode.ViterbiScore">
            <summary>
            Gets or sets the Viterbi score. Set only valid for initial nodes, and can only be called once.
            </summary>
        </member>
        <member name="P:LAIR.MachineLearning.HiddenMarkovModeling.HmmNode.MostLikelyPreviousNode">
            <summary>
            Decodes the previous node using Viterbi scores
            </summary>
        </member>
        <member name="P:LAIR.MachineLearning.HiddenMarkovModeling.HmmNode.State">
            <summary>
            Gets the state
            </summary>
        </member>
        <member name="P:LAIR.MachineLearning.HiddenMarkovModeling.HmmNode.Time">
            <summary>
            Gets the time
            </summary>
        </member>
        <member name="T:LAIR.MachineLearning.HiddenMarkovModeling.HmmNode.ScoringMethod">
            <summary>
            Scoring methods
            </summary>
        </member>
        <member name="F:LAIR.MachineLearning.HiddenMarkovModeling.HmmNode.ScoringMethod.ForwardProbability">
            <summary>
            Compute score as sum over previous nodes
            </summary>
        </member>
        <member name="F:LAIR.MachineLearning.HiddenMarkovModeling.HmmNode.ScoringMethod.ViterbiDecoding">
            <summary>
            Compute score as maximum value over previous nodes
            </summary>
        </member>
        <member name="T:LAIR.MachineLearning.FeatureNameTransformation.DiskBasedNumericFeatureNameTransform">
            <summary>
            Provides disk-based access to a feature name transform file. Provides ability to add new
            features via an internal memory-based transform.
            </summary>
        </member>
        <member name="M:LAIR.MachineLearning.FeatureNameTransformation.DiskBasedNumericFeatureNameTransform.#ctor(LAIR.IO.SearchTextStream)">
            <summary>
            Constructor
            </summary>
            <param name="featureNameSearch">Search handler</param>
        </member>
        <member name="M:LAIR.MachineLearning.FeatureNameTransformation.DiskBasedNumericFeatureNameTransform.Initialize">
            <summary>
            Initializes this disk-based transform
            </summary>
        </member>
        <member name="M:LAIR.MachineLearning.FeatureNameTransformation.DiskBasedNumericFeatureNameTransform.GetFeatureNumber(System.String)">
            <summary>
            Gets the number for a feature
            </summary>
            <param name="featureName">Name of feature for which to get number</param>
            <returns>Feature number</returns>
        </member>
        <member name="M:LAIR.MachineLearning.FeatureNameTransformation.DiskBasedNumericFeatureNameTransform.Save(System.String)">
            <summary>
            Saves any memory-based storage to disk and reloads disk-based transform
            </summary>
            <param name="path">Where to save transform</param>
        </member>
        <member name="M:LAIR.MachineLearning.FeatureNameTransformation.DiskBasedNumericFeatureNameTransform.Clear">
            <summary>
            Clears the transform
            </summary>
        </member>
        <member name="P:LAIR.MachineLearning.FeatureNameTransformation.DiskBasedNumericFeatureNameTransform.Locked">
            <summary>
            Gets or sets whether or not this transform is locked
            </summary>
        </member>
        <member name="T:LAIR.MachineLearning.FeatureNameTransformation.BinarySearchNumericFeatureNameTransform">
            <summary>
            Stores nothing in memory. Uses an on-disk binary search of the feature name transform file.
            </summary>
        </member>
        <member name="M:LAIR.MachineLearning.FeatureNameTransformation.BinarySearchNumericFeatureNameTransform.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="path">Path to transform file, or null if no initial transform is to be used</param>
        </member>
        <member name="T:LAIR.MachineLearning.ClassifierWrappers.LibLinear.LibLinearClassifier">
            <summary>
            Wrapper for the LibLinear classifier
            </summary>
        </member>
        <member name="T:LAIR.MachineLearning.ClassifierWrappers.NumberedFeatureClassifier">
             <summary>
             Abstract base class for all classifiers that make use of the following instance format:
            
               label feature1:value1 feature2:value2 ... featureN:valueN
            
             The one-based feature numbers are sorted ascendingly from left to right. Example classifiers
             include SVM Light (and its derivatives) and LibLinear.
             </summary>
        </member>
        <member name="M:LAIR.MachineLearning.ClassifierWrappers.NumberedFeatureClassifier.GetInstanceText(LAIR.MachineLearning.FeatureVector,LAIR.MachineLearning.LabelMap,LAIR.MachineLearning.FeatureSpaceRepresentation.FeatureSpace,System.Boolean,LAIR.MachineLearning.FeatureNameTransformation.NumericFeatureNameTransform)">
            <summary>
            Gets instance text for feature vector
            </summary>
            <param name="vector">Feature vector to get instance text for</param>
            <param name="labelMap">Label map to use</param>
            <param name="featureSpace">Feature space to restrict feature space to, or null for no restriction</param>
            <param name="scaleNumericFeatureValues">Whether or not to scale numeric feature values to [0,1] using the observed range in 
            the given feature space. It's possible for a scaled value to be greater than 1 in cases where the observed range doesn't 
            include the value.</param>
            <param name="featureNameTransform">Feature name transform to apply</param>
            <returns>Instance text for a feature vector</returns>
        </member>
        <member name="M:LAIR.MachineLearning.ClassifierWrappers.NumberedFeatureClassifier.GetInstanceText(LAIR.MachineLearning.FeatureVector,LAIR.MachineLearning.LabelMap,LAIR.MachineLearning.FeatureSpaceRepresentation.FeatureSpace,System.Boolean,LAIR.MachineLearning.FeatureNameTransformation.NumericFeatureNameTransform,System.Collections.Generic.Dictionary{System.Int32,LAIR.MachineLearning.NumericFeature}@)">
            <summary>
            Gets instance text for feature vector
            </summary>
            <param name="vector">Feature vector to get instance text for</param>
            <param name="labelMap">Label map to use</param>
            <param name="featureSpace">Feature space to restrict feature space to, or null for no restriction</param>
            <param name="scaleNumericFeatureValues">Whether or not to scale numeric feature values to [0,1] using the observed range in 
            the given feature space. It's possible for a scaled value to be greater than 1 in cases where the observed range doesn't 
            include the value. If true, caller must supply a feature space.</param>
            <param name="featureNameTransform">Feature name transform to apply</param>
            <param name="numericFeatureNumbers">This method will add any numeric feature numbers to the supplied set. Pass null if 
            feature numbers aren't needed.</param>
            <returns>Instance text for a feature vector</returns>
        </member>
        <member name="M:LAIR.MachineLearning.ClassifierWrappers.NumberedFeatureClassifier.#ctor(LAIR.MachineLearning.FeatureNameTransformation.NumericFeatureNameTransform.AccessMethod,LAIR.MachineLearning.FeatureSpaceRepresentation.FeatureSpace.AccessMethod,LAIR.MachineLearning.LabelMap.Mapping,System.Boolean,System.String,System.String,System.String,LAIR.MachineLearning.FeatureExtractor,System.Single)">
            <summary>
            Constructor
            </summary>
            <param name="featureNameTransformAccessMethod">Method of access for feature name transform</param>
            <param name="featureSpaceAccessMethod">Method of access for feature space</param>
            <param name="labelMapping">Label mapping to perform</param>
            <param name="scaleNumericFeatureValues">Scale numeric feature values</param>
            <param name="modelDirectory">Directory to store model files in</param>
            <param name="learnExePath">Path to LibLinear learn executable</param>
            <param name="classifyExePath">Path to LibLinear classify executable</param>
            <param name="featureExtractor">Feature extractor to use</param>
            <param name="labelConfidenceThreshold">Confidence threshold for labels</param>
        </member>
        <member name="M:LAIR.MachineLearning.ClassifierWrappers.NumberedFeatureClassifier.GetUnmappedLabel(System.String)">
            <summary>
            Gets an unmapped label
            </summary>
            <param name="mappedLabel">Mapped label to get unmapped label for</param>
            <returns>Unmapped label</returns>
        </member>
        <member name="M:LAIR.MachineLearning.ClassifierWrappers.NumberedFeatureClassifier.GetMappedLabel(System.String)">
            <summary>
            Gets a mapped label
            </summary>
            <param name="unmappedLabel">Unmapped label to get mapped label for</param>
            <returns>Mapped label</returns>
        </member>
        <member name="M:LAIR.MachineLearning.ClassifierWrappers.NumberedFeatureClassifier.GetInstanceText(LAIR.MachineLearning.FeatureVector)">
            <summary>
            Gets instance text as it would appear when classifying a feature vector
            </summary>
            <param name="featureVector">Feature vector to get instance text for</param>
            <returns>Instance text</returns>
        </member>
        <member name="M:LAIR.MachineLearning.ClassifierWrappers.NumberedFeatureClassifier.PreConsumeTrainingVectors">
            <summary>
            Called just before the first training vectors are consumed
            </summary>
        </member>
        <member name="M:LAIR.MachineLearning.ClassifierWrappers.NumberedFeatureClassifier.ConsumeTrainingVectors(LAIR.MachineLearning.FeatureVectorList)">
            <summary>
            Consumes training feature vectors
            </summary>
            <param name="featureVectors"></param>
        </member>
        <member name="M:LAIR.MachineLearning.ClassifierWrappers.NumberedFeatureClassifier.PreLearn">
            <summary>
            Called just before learning takes place
            </summary>
        </member>
        <member name="M:LAIR.MachineLearning.ClassifierWrappers.NumberedFeatureClassifier.GetSpaceBeforeFeatures(System.String)">
            <summary>
            Gets the space before the feature-value pairs
            </summary>
            <param name="vector">Feature vector line</param>
        </member>
        <member name="M:LAIR.MachineLearning.ClassifierWrappers.NumberedFeatureClassifier.PreClassify(LAIR.MachineLearning.FeatureVectorList)">
            <summary>
            Write instance file to classify
            </summary>
            <param name="featureVectors">Feature vectors to be classified</param>
        </member>
        <member name="M:LAIR.MachineLearning.ClassifierWrappers.NumberedFeatureClassifier.PostClassify(LAIR.MachineLearning.FeatureVectorList)">
            <summary>
            Called just after classification takes place
            </summary>
            <param name="featureVectors">Feature vectors that were classified</param>
        </member>
        <member name="M:LAIR.MachineLearning.ClassifierWrappers.NumberedFeatureClassifier.LoadClassificationModelFiles">
            <summary>
            Loads supporting model files that allow this classifier to classify feature vectors
            </summary>
        </member>
        <member name="M:LAIR.MachineLearning.ClassifierWrappers.NumberedFeatureClassifier.LabelIsValid(System.String)">
            <summary>
            Checks whether or not a label is valid
            </summary>
            <param name="label">Label to check</param>
            <returns>True if label is valid, false otherwise.</returns>
        </member>
        <member name="P:LAIR.MachineLearning.ClassifierWrappers.NumberedFeatureClassifier.TrainingInstancesFileName">
            <summary>
            Gets the name of the training instances file
            </summary>
        </member>
        <member name="P:LAIR.MachineLearning.ClassifierWrappers.NumberedFeatureClassifier.FeatureNameTransformFileName">
            <summary>
            Gets the feature name transform file name
            </summary>
        </member>
        <member name="P:LAIR.MachineLearning.ClassifierWrappers.NumberedFeatureClassifier.FeatureSpaceFileName">
            <summary>
            Gets the feature space file name
            </summary>
        </member>
        <member name="P:LAIR.MachineLearning.ClassifierWrappers.NumberedFeatureClassifier.LabelMapFileName">
            <summary>
            Gets the label map file name
            </summary>
        </member>
        <member name="P:LAIR.MachineLearning.ClassifierWrappers.NumberedFeatureClassifier.ModelFileName">
            <summary>
            Gets the model file name
            </summary>
        </member>
        <member name="P:LAIR.MachineLearning.ClassifierWrappers.NumberedFeatureClassifier.InstancesToClassifyFileName">
            <summary>
            Gets the name of the instances to classify file
            </summary>
        </member>
        <member name="P:LAIR.MachineLearning.ClassifierWrappers.NumberedFeatureClassifier.FeatureNameTransformAccessMethod">
            <summary>
            Gets the name transform access method
            </summary>
        </member>
        <member name="P:LAIR.MachineLearning.ClassifierWrappers.NumberedFeatureClassifier.FeatureSpaceAccessMethod">
            <summary>
            Gets the feature space access method
            </summary>
        </member>
        <member name="P:LAIR.MachineLearning.ClassifierWrappers.NumberedFeatureClassifier.ScaleNumericFeatureValues">
            <summary>
            Gets whether or not to scale numeric feature values
            </summary>
        </member>
        <member name="P:LAIR.MachineLearning.ClassifierWrappers.NumberedFeatureClassifier.TrainingInstancesPath">
            <summary>
            Gets the path to the file containing training instances
            </summary>
        </member>
        <member name="P:LAIR.MachineLearning.ClassifierWrappers.NumberedFeatureClassifier.FeatureNameTransformPath">
            <summary>
            Gets the path to the feature name transform
            </summary>
        </member>
        <member name="P:LAIR.MachineLearning.ClassifierWrappers.NumberedFeatureClassifier.FeatureSpacePath">
            <summary>
            Gets the path to the feature space file
            </summary>
        </member>
        <member name="P:LAIR.MachineLearning.ClassifierWrappers.NumberedFeatureClassifier.FeatureSpaceRangeSearchPath">
            <summary>
            Gets the path to the feature space range search file
            </summary>
        </member>
        <member name="P:LAIR.MachineLearning.ClassifierWrappers.NumberedFeatureClassifier.LabelMapPath">
            <summary>
            Gets the path to the label map
            </summary>
        </member>
        <member name="P:LAIR.MachineLearning.ClassifierWrappers.NumberedFeatureClassifier.LabelMap">
            <summary>
            Gets the label map used in this classifier
            </summary>
        </member>
        <member name="P:LAIR.MachineLearning.ClassifierWrappers.NumberedFeatureClassifier.Labels">
            <summary>
            Gets labels used by this classifier
            </summary>
        </member>
        <member name="P:LAIR.MachineLearning.ClassifierWrappers.NumberedFeatureClassifier.ModelFilePath">
            <summary>
            Gets the path to the model
            </summary>
        </member>
        <member name="P:LAIR.MachineLearning.ClassifierWrappers.NumberedFeatureClassifier.InstancesToClassifyPath">
            <summary>
            Gets the path to the file containing the instances to classify
            </summary>
        </member>
        <member name="P:LAIR.MachineLearning.ClassifierWrappers.NumberedFeatureClassifier.ModelFiles">
            <summary>
            Gets the model files used by the implementing class
            </summary>
        </member>
        <member name="P:LAIR.MachineLearning.ClassifierWrappers.NumberedFeatureClassifier.ModelFilesCurrent">
            <summary>
            Gets model files use by the current class
            </summary>
        </member>
        <member name="P:LAIR.MachineLearning.ClassifierWrappers.NumberedFeatureClassifier.MemoryFeatureNameTransformSize">
            <summary>
            Gets or sets the starting size of the memory-based feature name transform. In order to take effect, this must
            be set before the first training vectors are consumed. Will throw an exception if set when using disk-based
            feature name transformation.
            </summary>
        </member>
        <member name="M:LAIR.MachineLearning.ClassifierWrappers.LibLinear.LibLinearClassifier.ApplyPredictions(System.String,LAIR.MachineLearning.FeatureVectorList,System.Boolean,LAIR.MachineLearning.LabelMap)">
            <summary>
            Applies classification predictions to a list of feature vectors
            </summary>
            <param name="predictionsPath">Path to predictions file</param>
            <param name="featureVectors">Feature vectors to apply predictions to</param>
            <param name="outputProbabilities">Whether or not probabilities were output</param>
            <param name="labelMap">Label map to use</param>
        </member>
        <member name="M:LAIR.MachineLearning.ClassifierWrappers.LibLinear.LibLinearClassifier.GetFeatureWeights(System.String)">
            <summary>
            Gets feature weights from a LibLinear model file. First key is the class label, the second key is the 1-based weight number
            and the value is the weight. For a two-class problem, there is only one class label in the first key, and that is the label
            first encountered in the model file. For a multi-class problem, there is a key for each class label.
            </summary>
            <param name="modelPath">Path to LibLinear model file</param>
            <returns>Feature weights</returns>
        </member>
        <member name="M:LAIR.MachineLearning.ClassifierWrappers.LibLinear.LibLinearClassifier.#ctor(LAIR.MachineLearning.ClassifierWrappers.LibLinear.LibLinearClassifier.Solver,LAIR.MachineLearning.FeatureNameTransformation.NumericFeatureNameTransform.AccessMethod,LAIR.MachineLearning.FeatureSpaceRepresentation.FeatureSpace.AccessMethod,System.Boolean,System.String,System.String,System.String,LAIR.MachineLearning.FeatureExtractor,System.Single)">
            <summary>
            Constructor
            </summary>
            <param name="solver">Solver to use</param>
            <param name="featureNameTransformAccessMethod">Method of access for feature name transform</param>
            <param name="featureSpaceAccessMethod">Method of access for feature space</param>
            <param name="scaleNumericFeatureValues">Scale numeric feature values</param>
            <param name="modelDirectory">Directory to store model files in</param>
            <param name="learnExePath">Path to LibLinear learn executable</param>
            <param name="classifyExePath">Path to LibLinear classify executable</param>
            <param name="featureExtractor">Feature extractor to use</param>
            <param name="labelConfidenceThreshold">Confidence threshold for labels</param>
        </member>
        <member name="M:LAIR.MachineLearning.ClassifierWrappers.LibLinear.LibLinearClassifier.GetLearnProcessArguments">
            <summary>
            Gets learn process arguments
            </summary>
            <returns>Learn process arguments</returns>
        </member>
        <member name="M:LAIR.MachineLearning.ClassifierWrappers.LibLinear.LibLinearClassifier.PreLearn">
            <summary>
            Called just before learning
            </summary>
        </member>
        <member name="M:LAIR.MachineLearning.ClassifierWrappers.LibLinear.LibLinearClassifier.GetSpaceBeforeFeatures(System.String)">
            <summary>
            Gets index of space before feature-value pairs
            </summary>
            <param name="vector">Feature vector</param>
            <returns>Index of space</returns>
        </member>
        <member name="M:LAIR.MachineLearning.ClassifierWrappers.LibLinear.LibLinearClassifier.GetClassifyProcessArguments">
            <summary>
            Gets arguments for learn process
            </summary>
            <returns>Arguments for learn process</returns>
        </member>
        <member name="M:LAIR.MachineLearning.ClassifierWrappers.LibLinear.LibLinearClassifier.PostClassify(LAIR.MachineLearning.FeatureVectorList)">
            <summary>
            Applies predictions and cleans up
            </summary>
            <param name="featureVectors">Feature vectors that have been classified</param>
        </member>
        <member name="P:LAIR.MachineLearning.ClassifierWrappers.LibLinear.LibLinearClassifier.PredictionsFileName">
            <summary>
            Gets the name of the predictions file name
            </summary>
        </member>
        <member name="P:LAIR.MachineLearning.ClassifierWrappers.LibLinear.LibLinearClassifier.SolverType">
            <summary>
            Gets the type of solver used
            </summary>
        </member>
        <member name="P:LAIR.MachineLearning.ClassifierWrappers.LibLinear.LibLinearClassifier.Cost">
            <summary>
            Gets or sets the cost parameter
            </summary>
        </member>
        <member name="P:LAIR.MachineLearning.ClassifierWrappers.LibLinear.LibLinearClassifier.Epsilon">
            <summary>
            Gets or sets the epsilon parameter
            </summary>
        </member>
        <member name="P:LAIR.MachineLearning.ClassifierWrappers.LibLinear.LibLinearClassifier.Bias">
            <summary>
            Gets or sets the bias parameter
            </summary>
        </member>
        <member name="P:LAIR.MachineLearning.ClassifierWrappers.LibLinear.LibLinearClassifier.CrossValidationFolds">
            <summary>
            Gets or sets the number of cross-validation folds to use
            </summary>
        </member>
        <member name="P:LAIR.MachineLearning.ClassifierWrappers.LibLinear.LibLinearClassifier.OutputProbabilities">
            <summary>
            Gets or sets whether or not to output classification probabilities (only valid for logistic regression classifier)
            </summary>
        </member>
        <member name="P:LAIR.MachineLearning.ClassifierWrappers.LibLinear.LibLinearClassifier.PredictionsPath">
            <summary>
            Gets the path to the file to be written with predictions
            </summary>
        </member>
        <member name="P:LAIR.MachineLearning.ClassifierWrappers.LibLinear.LibLinearClassifier.ModelFiles">
            <summary>
            Gets a list of files used in the current model
            </summary>
        </member>
        <member name="T:LAIR.MachineLearning.ClassifierWrappers.LibLinear.LibLinearClassifier.Solver">
            <summary>
            Types of LibLinear solvers
            </summary>
        </member>
        <member name="F:LAIR.MachineLearning.ClassifierWrappers.LibLinear.LibLinearClassifier.Solver.LogisticRegression">
            <summary>
            L2-regularized logistic regression
            </summary>
        </member>
        <member name="F:LAIR.MachineLearning.ClassifierWrappers.LibLinear.LibLinearClassifier.Solver.L2DualSVM">
            <summary>
            L2-loss support vector machine
            </summary>
        </member>
        <member name="F:LAIR.MachineLearning.ClassifierWrappers.LibLinear.LibLinearClassifier.Solver.L2PrimalSVM">
            <summary>
            L2-loss support vector machine
            </summary>
        </member>
        <member name="F:LAIR.MachineLearning.ClassifierWrappers.LibLinear.LibLinearClassifier.Solver.L1DualSVM">
            <summary>
            L1-loss support vector machine
            </summary>
        </member>
        <member name="F:LAIR.MachineLearning.ClassifierWrappers.LibLinear.LibLinearClassifier.Solver.MultiClassSVM">
            <summary>
            Multi-class SVM by Crammer and Singer
            </summary>
        </member>
        <member name="T:LAIR.MachineLearning.ClassifierWrappers.LibLinear.LibLinearFeatureVectorReader">
            <summary>
            Reads LibLinear-style feature vector files
            </summary>
        </member>
        <member name="M:LAIR.MachineLearning.ClassifierWrappers.LibLinear.LibLinearFeatureVectorReader.GetVectors(System.String)">
            <summary>
            Gets feature vectors from a file
            </summary>
            <param name="path">Path to file from which to get vectors</param>
            <returns>List of feature vectors</returns>
        </member>
        <member name="T:LAIR.MachineLearning.Evaluation.EvaluationCurve">
            <summary>
            EvaluationCurve class
            </summary>
        </member>
        <member name="M:LAIR.MachineLearning.Evaluation.EvaluationCurve.GetAverageCurve(System.Collections.Generic.Dictionary{System.Int32,LAIR.MachineLearning.Evaluation.EvaluationCurve}.ValueCollection)">
            <summary>
            Gets the average curve
            </summary>
            <param name="curves"></param>
            <returns></returns>
        </member>
        <member name="M:LAIR.MachineLearning.Evaluation.EvaluationCurve.GetAverageCurve(System.Collections.Generic.List{LAIR.MachineLearning.Evaluation.EvaluationCurve})">
            <summary>
            Gets the average curve
            </summary>
            <param name="curves"></param>
            <returns></returns>
        </member>
        <member name="P:LAIR.MachineLearning.Evaluation.EvaluationCurve.LastPoint">
            <summary>
            Gets the last evaluation point in this curve
            </summary>
        </member>
        <member name="T:LAIR.MachineLearning.Evaluation.EvaluationPairProvider">
            <summary>
            Provides evaluation pairs to evaluation routines. An evaluation pair contains the true entity and the
            entity that should be automatically classified.
            </summary>
        </member>
        <member name="M:LAIR.MachineLearning.Evaluation.EvaluationPairProvider.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="id">ID for this provider</param>
        </member>
        <member name="M:LAIR.MachineLearning.Evaluation.EvaluationPairProvider.Start">
            <summary>
            Starts this provider at the beginning of the sequence of evaluation pairs
            </summary>
        </member>
        <member name="M:LAIR.MachineLearning.Evaluation.EvaluationPairProvider.GetNextEvaluationPair">
            <summary>
            Gets the next evaluation pair
            </summary>
            <returns>Next evaluation pair</returns>
        </member>
        <member name="P:LAIR.MachineLearning.Evaluation.EvaluationPairProvider.ID">
            <summary>
            Gets or sets the ID of this provider
            </summary>
        </member>
        <member name="T:LAIR.MachineLearning.Clustering.Cluto.Cluto">
            <summary>
            Wrapper class for Cluto functionality
            </summary>
        </member>
        <member name="M:LAIR.MachineLearning.Clustering.Cluto.Cluto.#cctor">
            <summary>
            Static constructor
            </summary>
        </member>
        <member name="M:LAIR.MachineLearning.Clustering.Cluto.Cluto.GetFeatures(System.String)">
            <summary>
            Gets features
            </summary>
            <param name="line"></param>
            <returns></returns>
        </member>
        <member name="M:LAIR.MachineLearning.Clustering.Cluto.Cluto.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:LAIR.MachineLearning.Clustering.Cluto.Cluto.WriteMatrix(LAIR.MachineLearning.FeatureVectorList,System.String,System.String,System.String,System.String)">
            <summary>
            Writes feature vectors to Cluto matrix and create row class file
            </summary>
            <param name="vecs">Feature vectors to write</param>
            <param name="matrixPath">Path of file to write</param>
            <param name="rowClassPath">Path of row class file to write</param>
            <param name="columnLabelPath">Path of column label file to write</param>
            <param name="zeroVectorPath">Path to file written with the index of zero-vectors</param>
        </member>
        <member name="M:LAIR.MachineLearning.Clustering.Cluto.Cluto.CreateHpccSubmissionScript(System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32[])">
            <summary>
            Creates HPCC submission script for Cluto clusterings
            </summary>
            <param name="matrixFilename">Name of matrix file</param>
            <param name="rowClassFilename">Name of row class file</param>
            <param name="columnLabelFilename">Name of column label file</param>
            <param name="outputPath">Where to write submission script</param>
            <param name="startNumber">Start number of clusters</param>
            <param name="endNumber">End number of clusters</param>
            <param name="increment">Cluster number increment</param>
            <param name="specificNumbers">Specific cluster numbers to do</param>
        </member>
        <member name="M:LAIR.MachineLearning.Clustering.Cluto.Cluto.Cluster(System.Collections.Generic.List{LAIR.MachineLearning.Clustering.Cluto.ClutoFeatureVector},System.String,System.String,System.String,System.String)">
            <summary>
            Clusters a list of feature vectors using the output of Cluto
            </summary>
            <param name="featureVectors">Feature vectors to cluster</param>
            <param name="clusteringID">ID of clustering</param>
            <param name="solutionPath">Cluto solution path</param>
            <param name="clutoOutputPath">Standard output of Cluto</param>
            <param name="zeroVectorPath">Path to file containing indexes of zero-vectors</param>
            <returns>Cluto clustering solution</returns>
        </member>
        <member name="M:LAIR.MachineLearning.Clustering.Cluto.Cluto.GetZScore(System.String)">
            <summary>
            Gets floating point z-score from string value
            </summary>
            <param name="zScore"></param>
            <returns></returns>
        </member>
        <member name="T:LAIR.MachineLearning.Clustering.Cluto.Cluto.ClusteringMethod">
            <summary>
            Clustering methods
            </summary>
        </member>
        <member name="T:LAIR.MachineLearning.Clustering.Cluto.Cluto.CriterionFunction">
            <summary>
            Criterion functions
            </summary>
        </member>
        <member name="T:LAIR.MachineLearning.Clustering.Cluto.Cluto.SimilarityFunction">
            <summary>
            Similarity functions
            </summary>
        </member>
        <member name="T:LAIR.MachineLearning.Clustering.Cluto.Cluto.ClusterSelection">
            <summary>
            Cluster selection heuristics
            </summary>
        </member>
        <member name="T:LAIR.MachineLearning.ClassifierWrappers.Weka.WekaSvmClassifier">
            <summary>
            Binary support vector machine implementation provided by Weka
            </summary>
        </member>
        <member name="M:LAIR.MachineLearning.ClassifierWrappers.Weka.WekaSvmClassifier.#ctor(LAIR.MachineLearning.FeatureExtractor,System.String,System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="featureExtractor">Feature extractor to use</param>
            <param name="modelDirectory">Model directory</param>
            <param name="javaExePath">Path to Java executable</param>
            <param name="wekaJarPath">Path to Weka jar file</param>
        </member>
        <member name="M:LAIR.MachineLearning.ClassifierWrappers.Weka.WekaSvmClassifier.GetLearnProcessArguments">
            <summary>
            GetLearnProcessArguments
            </summary>
            <returns></returns>
        </member>
        <member name="P:LAIR.MachineLearning.ClassifierWrappers.Weka.WekaSvmClassifier.RBFKernel">
            <summary>
            Whether or not to use an RBF kernel (default:  false)
            </summary>
        </member>
        <member name="P:LAIR.MachineLearning.ClassifierWrappers.Weka.WekaSvmClassifier.Gamma">
            <summary>
            Gets or sets the gamma parameter for RBF kernels (default:  0.01)
            </summary>
        </member>
        <member name="P:LAIR.MachineLearning.ClassifierWrappers.Weka.WekaSvmClassifier.ClassifierClass">
            <summary>
            Gets the class for Weka SVMs
            </summary>
        </member>
        <member name="T:LAIR.MachineLearning.NumericFeature">
            <summary>
            Represents features with infinite numeric domains
            </summary>
        </member>
        <member name="T:LAIR.MachineLearning.Feature">
            <summary>
            Abstract base class for all feature classes
            </summary>
        </member>
        <member name="M:LAIR.MachineLearning.Feature.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="name">Name of feature. May not contain spaces.</param>
        </member>
        <member name="M:LAIR.MachineLearning.Feature.Equals(System.Object)">
            <summary>
            Checks whether this feature equals another
            </summary>
            <param name="obj">Other feature to check</param>
            <returns>True if features are equal, false otherwise</returns>
        </member>
        <member name="M:LAIR.MachineLearning.Feature.GetHashCode">
            <summary>
            Gets hash code for this feature
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:LAIR.MachineLearning.Feature.Copy">
            <summary>
            Gets a deep copy of this feature
            </summary>
        </member>
        <member name="M:LAIR.MachineLearning.Feature.Rename(System.String)">
            <summary>
            Renames the current feature, returning a new feature.
            </summary>
            <param name="newName">New feature name</param>
            <returns>New feature</returns>
        </member>
        <member name="M:LAIR.MachineLearning.Feature.ToString">
            <summary>
            Gets name of feature
            </summary>
            <returns></returns>
        </member>
        <member name="M:LAIR.MachineLearning.Feature.CompareTo(LAIR.MachineLearning.Feature)">
            <summary>
            Compares this feature to another feature on the basis of feature names
            </summary>
            <param name="other">Other feature</param>
            <returns></returns>
        </member>
        <member name="P:LAIR.MachineLearning.Feature.Name">
            <summary>
            Gets or sets the name
            </summary>
        </member>
        <member name="M:LAIR.MachineLearning.NumericFeature.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="name">Name of feature</param>
        </member>
        <member name="M:LAIR.MachineLearning.NumericFeature.#ctor(System.String,System.Single,System.Single)">
            <summary>
            Constructor
            </summary>
            <param name="name">Name of feature</param>
            <param name="rangeMinimum">Minimum value of this feature</param>
            <param name="rangeMaximum">Maximum value of this feature</param>
        </member>
        <member name="M:LAIR.MachineLearning.NumericFeature.Copy">
            <summary>
            Gets a deep copy of this numeric feature
            </summary>
            <returns>Feature copy</returns>
        </member>
        <member name="M:LAIR.MachineLearning.NumericFeature.Rename(System.String)">
            <summary>
            Renames the current feature, returning a new feature.
            </summary>
            <param name="newName">New name</param>
            <returns>New feature</returns>
        </member>
        <member name="M:LAIR.MachineLearning.NumericFeature.Equals(System.Object)">
            <summary>
            Gets whether or not this numeric feature equals another feature
            </summary>
            <param name="obj">Other feature</param>
            <returns>True if both features are numeric with the same name</returns>
        </member>
        <member name="M:LAIR.MachineLearning.NumericFeature.GetHashCode">
            <summary>
            Gets hash code for this feature
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:LAIR.MachineLearning.NumericFeature.IsWithinRange(System.Single)">
            <summary>
            Gets whether or not a value is within the range of this numeric feature
            </summary>
            <param name="value">Value to check</param>
            <returns>True if the value is in the range, false otherwise</returns>
        </member>
        <member name="P:LAIR.MachineLearning.NumericFeature.RangeMinimum">
            <summary>
            Gets or sets the minimum value of this feature
            </summary>
        </member>
        <member name="P:LAIR.MachineLearning.NumericFeature.RangeMaximum">
            <summary>
            Gets or sets the maximum value of this feature
            </summary>
        </member>
        <member name="T:LAIR.MachineLearning.Clustering.Cluto.ClutoFeature">
            <summary>
            Represents a Cluto clustering feature
            </summary>
        </member>
        <member name="M:LAIR.MachineLearning.Clustering.Cluto.ClutoFeature.#ctor(System.String,System.Single)">
            <summary>
            Constructor
            </summary>
            <param name="name">Name of feature</param>
            <param name="similarityAccountedFor">Amount of similarity this feature accounts for in its cluster</param>
        </member>
        <member name="M:LAIR.MachineLearning.Clustering.Cluto.ClutoFeature.Copy">
            <summary>
            Not implemented
            </summary>
            <returns></returns>
        </member>
        <member name="M:LAIR.MachineLearning.Clustering.Cluto.ClutoFeature.Rename(System.String)">
            <summary>
            Not implemented
            </summary>
            <param name="newName"></param>
            <returns></returns>
        </member>
        <member name="T:LAIR.MachineLearning.ClassifiableEntityList">
            <summary>
            Represents a list of classifiable entities
            </summary>
        </member>
        <member name="M:LAIR.MachineLearning.ClassifiableEntityList.SplitData(LAIR.MachineLearning.ClassifiableEntityList,LAIR.MachineLearning.ClassifiableEntityList,System.Boolean,LAIR.MachineLearning.ClassifiableEntityList@,LAIR.MachineLearning.ClassifiableEntityList@,System.Single,System.Boolean)">
            <summary>
            Splits positive/negative data into training/testing sets
            </summary>
            <param name="posInstances">Corpus of positive instances</param>
            <param name="negInstances">Corpus of negative instances</param>
            <param name="balancePosNeg">Whether or not to balance pos/neg training data</param>
            <param name="training">Training documents</param>
            <param name="testing">Testing documents</param>
            <param name="trainFraction">Fraction of data to use as training</param>
            <param name="randomize">Whether or not to randomize data</param>
        </member>
        <member name="M:LAIR.MachineLearning.ClassifiableEntityList.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:LAIR.MachineLearning.ClassifiableEntityList.#ctor(System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="initialCapacity">Initial capacity of list</param>
        </member>
        <member name="M:LAIR.MachineLearning.ClassifiableEntityList.#ctor(System.Collections.Generic.IEnumerable{LAIR.MachineLearning.ClassifiableEntity})">
            <summary>
            Constructor
            </summary>
            <param name="entities">Entities to add to list upon construction</param>
        </member>
        <member name="M:LAIR.MachineLearning.ClassifiableEntityList.Randomize">
            <summary>
            Randomizes this list
            </summary>
        </member>
        <member name="M:LAIR.MachineLearning.ClassifiableEntityList.IndexOf(LAIR.MachineLearning.ClassifiableEntity)">
            <summary>
            Gets index of an entity
            </summary>
            <param name="item">ClassifiableEntity to get index of</param>
            <returns>Index of entity</returns>
        </member>
        <member name="M:LAIR.MachineLearning.ClassifiableEntityList.Add(LAIR.MachineLearning.ClassifiableEntity)">
            <summary>
            Adds an entity to this list
            </summary>
            <param name="entity">Entity to add</param>
        </member>
        <member name="M:LAIR.MachineLearning.ClassifiableEntityList.Add(System.Collections.Generic.IEnumerable{LAIR.MachineLearning.ClassifiableEntity})">
            <summary>
            Adds a range of entities to this list
            </summary>
            <param name="entities">Entities to add</param>
        </member>
        <member name="M:LAIR.MachineLearning.ClassifiableEntityList.Clear">
            <summary>
            Clears entities from this list
            </summary>
        </member>
        <member name="M:LAIR.MachineLearning.ClassifiableEntityList.Contains(LAIR.MachineLearning.ClassifiableEntity)">
            <summary>
            Checks whether or not this list contains an entity
            </summary>
            <param name="entity">ClassifiableEntity to check for</param>
            <returns>True if this list contains the entity, false otherwise</returns>
        </member>
        <member name="M:LAIR.MachineLearning.ClassifiableEntityList.GetEnumerator">
            <summary>
            Gets enumerator over entities in this list
            </summary>
            <returns>Enumerator</returns>
        </member>
        <member name="M:LAIR.MachineLearning.ClassifiableEntityList.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes a range of entities from this list
            </summary>
            <param name="index">Index at which to start removing</param>
            <param name="count">Number of entities to remove</param>
        </member>
        <member name="M:LAIR.MachineLearning.ClassifiableEntityList.GetRange(System.Int32,System.Int32)">
            <summary>
            Gets a range of entities from this list
            </summary>
            <param name="index">Index at which to start getting entities</param>
            <param name="count">Number of entities to get</param>
        </member>
        <member name="M:LAIR.MachineLearning.ClassifiableEntityList.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets enumerator over entities in this list
            </summary>
            <returns></returns>
        </member>
        <member name="P:LAIR.MachineLearning.ClassifiableEntityList.Item(System.Int32)">
            <summary>
            Gets the entity at a specified index
            </summary>
            <param name="index">Index of entity to get</param>
            <returns>ClassifiableEntity</returns>
        </member>
        <member name="P:LAIR.MachineLearning.ClassifiableEntityList.Count">
            <summary>
            Gets the number of entities in this list
            </summary>
        </member>
        <member name="T:LAIR.MachineLearning.TrainingInstanceProvider">
            <summary>
            Provides training instances
            </summary>
        </member>
        <member name="M:LAIR.MachineLearning.TrainingInstanceProvider.#ctor(LAIR.MachineLearning.TrainingInstanceProvider.InstanceFilterDelegate)">
            <summary>
            Constructor
            </summary>
            <param name="instanceFilter">Instance filter to use when providing training instances</param>
        </member>
        <member name="M:LAIR.MachineLearning.TrainingInstanceProvider.Filter(LAIR.MachineLearning.ClassifiableEntity)">
            <summary>
            Applies filter to an instance
            </summary>
            <param name="instance">Instance to apply filter to</param>
            <returns>True if instance passes filter, false otherwise</returns>
        </member>
        <member name="P:LAIR.MachineLearning.TrainingInstanceProvider.InstanceFilter">
            <summary>
            Gets or sets the instance filter used in this provider
            </summary>
        </member>
        <member name="T:LAIR.MachineLearning.TrainingInstanceProvider.InstanceFilterDelegate">
            <summary>
            Delegate for functions that determine which instances should be used for training and what their true labels are
            </summary>
            <param name="instance">Instance to apply filter to</param>
            <param name="trueLabel">True label of instance, if not filtered out</param>
            <returns>Whether or not to use instance for training</returns>
        </member>
        <member name="T:LAIR.MachineLearning.FeatureVectorString">
            <summary>
            Represents a feature vector in string form
            </summary>
        </member>
        <member name="T:LAIR.MachineLearning.ClassifiableEntity">
            <summary>
            Base class for all classes whose instances may be classified by an instance of Classifier
            </summary>
        </member>
        <member name="M:LAIR.MachineLearning.ClassifiableEntity.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:LAIR.MachineLearning.ClassifiableEntity.CompareTo(System.Object)">
            <summary>
            Compares this scored entity to another based on its prediction confidence
            </summary>
            <param name="other">Entity to compare this one to</param>
            <returns></returns>
        </member>
        <member name="M:LAIR.MachineLearning.ClassifiableEntity.ToString">
            <summary>
            Returns the true class of this entity
            </summary>
            <returns></returns>
        </member>
        <member name="P:LAIR.MachineLearning.ClassifiableEntity.IsZeroVector">
            <summary>
            Gets or sets whether or not this entity corresponds to a zero-vector
            </summary>
        </member>
        <member name="P:LAIR.MachineLearning.ClassifiableEntity.PredictionConfidenceScores">
            <summary>
            Gets or sets the prediction confidence scores
            </summary>
        </member>
        <member name="P:LAIR.MachineLearning.ClassifiableEntity.PredictedClass">
            <summary>
            Gets the predicted class
            </summary>
        </member>
        <member name="P:LAIR.MachineLearning.ClassifiableEntity.PredictionConfidence">
            <summary>
            Gets the confidence of the predicted class
            </summary>
        </member>
        <member name="P:LAIR.MachineLearning.ClassifiableEntity.TrueClass">
            <summary>
            Gets or sets the true class
            </summary>
        </member>
        <member name="P:LAIR.MachineLearning.ClassifiableEntity.ContainingList">
            <summary>
            Gets or sets the list that contains this entity
            </summary>
        </member>
        <member name="P:LAIR.MachineLearning.ClassifiableEntity.Rank">
            <summary>
            Gets the rank of this entity (1-based)
            </summary>
        </member>
        <member name="M:LAIR.MachineLearning.FeatureVectorString.#ctor(System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="trueClass">True class of vector</param>
            <param name="features">Line of text representing features</param>
        </member>
        <member name="P:LAIR.MachineLearning.FeatureVectorString.Features">
            <summary>
            Gets or sets the list of features
            </summary>
        </member>
        <member name="T:LAIR.MachineLearning.FeatureSpaceRepresentation.HashSearchFeatureSpace">
            <summary>
            Represents a feature space that can be searched using a hash-based search
            </summary>
        </member>
        <member name="M:LAIR.MachineLearning.FeatureSpaceRepresentation.HashSearchFeatureSpace.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="path">Path to feature space file</param>
        </member>
        <member name="M:LAIR.MachineLearning.FeatureSpaceRepresentation.HashSearchFeatureSpace.GetSearchValuePrefix(LAIR.MachineLearning.Feature)">
            <summary>
            Gets the search value prefix for a feature, which is just the feature name itself with a space on the end to 
            separate it from the value.
            </summary>
            <param name="feature">Feature to get feature value prefix for</param>
            <returns>Feature value prefix</returns>
        </member>
        <member name="M:LAIR.MachineLearning.FeatureSpaceRepresentation.HashSearchFeatureSpace.GetSearchValuePrefix(System.String)">
            <summary>
            Gets the search value prefix for a feature, which is just the feature name itself with a space on the end to 
            separate it from the value.
            </summary>
            <param name="featureName">Feature to get feature value prefix for</param>
            <returns>Feature value prefix</returns>
        </member>
        <member name="T:LAIR.MachineLearning.Evaluation.ConfusionMatrix">
            <summary>
            Represents a two-dimensional confusion matrix
            </summary>
        </member>
        <member name="M:LAIR.MachineLearning.Evaluation.ConfusionMatrix.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Constructor
            </summary>
            <param name="classLabels">Class labels to use in matrix</param>
        </member>
        <member name="M:LAIR.MachineLearning.Evaluation.ConfusionMatrix.#ctor(System.String[])">
            <summary>
            Constructor
            </summary>
            <param name="classLabels">Class labels to use in matrix</param>
        </member>
        <member name="M:LAIR.MachineLearning.Evaluation.ConfusionMatrix.#ctor(System.String)">
            <summary>
            Constructor. Reads a confusion matrix from file. Valid files are those produced by WriteReport 
            or those containing text returned by GetTabular.
            </summary>
            <param name="path">Path to file</param>
        </member>
        <member name="M:LAIR.MachineLearning.Evaluation.ConfusionMatrix.ConstructMatrix(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Constructs the matrix with a set of labels
            </summary>
            <param name="classLabels">Labels to use</param>
        </member>
        <member name="M:LAIR.MachineLearning.Evaluation.ConfusionMatrix.Contains(System.String)">
            <summary>
            Checks whether this matrix contains a label
            </summary>
            <param name="classLabel">Label to check</param>
            <returns>True if label is contained, false otherwise.</returns>
        </member>
        <member name="M:LAIR.MachineLearning.Evaluation.ConfusionMatrix.AddClassification(System.String,System.String)">
            <summary>
            Adds a classification result to this matrix
            </summary>
            <param name="trueClassLabel">True label of classification</param>
            <param name="predictedClassLabel">Predicted label of classification</param>
        </member>
        <member name="M:LAIR.MachineLearning.Evaluation.ConfusionMatrix.AddClassifications(System.Collections.Generic.ICollection{System.String},System.Collections.Generic.ICollection{System.String},System.String)">
            <summary>
            Adds instance classifications to this confusion matrix
            </summary>
            <param name="trueArgumentLabels">True labels for instance</param>
            <param name="predictedArgumentLabels">Predicted labels for instance</param>
            <param name="noPredictionLabel">Label to use when no prediction was made for the instance</param>
        </member>
        <member name="M:LAIR.MachineLearning.Evaluation.ConfusionMatrix.GetTruePositives(System.String)">
            <summary>
            Gets the number of true positives for a class (i.e., the number of items from the given class that
            were classified as being in the given class)
            </summary>
            <param name="classLabel">Class to get true positives for</param>
            <returns>Number of true positives</returns>
        </member>
        <member name="M:LAIR.MachineLearning.Evaluation.ConfusionMatrix.GetTrueNegatives(System.String)">
            <summary>
            Gets the number of true negatives for a class (i.e., the number of items from a class other than the given one was
            classified as something other than the given one)
            </summary>
            <param name="classLabel">Class to get the number of true negatives for</param>
            <returns>Number of true negatives</returns>
        </member>
        <member name="M:LAIR.MachineLearning.Evaluation.ConfusionMatrix.GetFalsePositives(System.String)">
            <summary>
            Gets the number of false positives for a class (i.e., the number of items from another class that were
            misclassified as being in the given class)
            </summary>
            <param name="classLabel">Class to get false positives for</param>
            <returns>Number of false positives</returns>
        </member>
        <member name="M:LAIR.MachineLearning.Evaluation.ConfusionMatrix.GetFalseNegatives(System.String)">
            <summary>
            Gets the number of false negatives for a class (i.e., the number of times items from the given class
            that were misclassified as being in another class)
            </summary>
            <param name="classLabel">Class to get false negatives for</param>
            <returns>Number of false negatives</returns>
        </member>
        <member name="M:LAIR.MachineLearning.Evaluation.ConfusionMatrix.GetPrecision(System.String)">
            <summary>
            Gets precision for a class
            </summary>
            <param name="classLabel">Class to get precision for</param>
            <returns>Precision for given class</returns>
        </member>
        <member name="M:LAIR.MachineLearning.Evaluation.ConfusionMatrix.GetOverallPrecision">
            <summary>
            Gets precision across all classes
            </summary>
            <returns>Precision over all classes</returns>
        </member>
        <member name="M:LAIR.MachineLearning.Evaluation.ConfusionMatrix.GetOverallPrecision(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Gets overall precision for particular classes
            </summary>
            <param name="classLabels">Labels of classes to get overall precision for</param>
            <returns>Overall precision</returns>
        </member>
        <member name="M:LAIR.MachineLearning.Evaluation.ConfusionMatrix.GetRecall(System.String)">
            <summary>
            Gets recall for a class
            </summary>
            <param name="classLabel">Class to get recall for</param>
            <returns>Recall for given class</returns>
        </member>
        <member name="M:LAIR.MachineLearning.Evaluation.ConfusionMatrix.GetOverallRecall(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Gets overall recall for particular classes
            </summary>
            <param name="classLabels">Labels of classes to get overall recall for</param>
            <returns>Overall recall</returns>
        </member>
        <member name="M:LAIR.MachineLearning.Evaluation.ConfusionMatrix.GetFMeasure(System.String)">
            <summary>
            Gets F-measure for a class using beta=1
            </summary>
            <param name="classLabel">Class to get F-measure for</param>
            <returns>F-measure for given class</returns>
        </member>
        <member name="M:LAIR.MachineLearning.Evaluation.ConfusionMatrix.GetFMeasure(System.String,System.Single)">
            <summary>
            Gets F-measure for a class using a specific beta
            </summary>
            <param name="classLabel">Class to get f-measure for</param>
            <param name="beta">Beta value to use</param>
            <returns>F-measure for given class and beta</returns>
        </member>
        <member name="M:LAIR.MachineLearning.Evaluation.ConfusionMatrix.GetOverallFMeasure">
            <summary>
            Gets overall f-measure across all classes using beta=1
            </summary>
            <returns>Overall f-measure</returns>
        </member>
        <member name="M:LAIR.MachineLearning.Evaluation.ConfusionMatrix.GetOverallFMeasure(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Gets overall f-measure for a set of classes using beta=1
            </summary>
            <param name="classLabels">Labels of classes to get overall f-measure for</param>
            <returns>Overall f-measure</returns>
        </member>
        <member name="M:LAIR.MachineLearning.Evaluation.ConfusionMatrix.GetOverallFMeasure(System.String[])">
            <summary>
            Gets overall f-measure for a set of classes using beta=1
            </summary>
            <param name="classLabels">Labels of classes to get overall f-measure for</param>
            <returns>Overall f-measure</returns>
        </member>
        <member name="M:LAIR.MachineLearning.Evaluation.ConfusionMatrix.GetOverallFMeasure(System.Collections.Generic.IEnumerable{System.String},System.Single)">
            <summary>
            Gets overall f-measure for a set of classes
            </summary>
            <param name="classLabels">Labels of classes to get overall f-measure for</param>
            <param name="beta">Beta parameter</param>
            <returns>Overall f-measure</returns>
        </member>
        <member name="M:LAIR.MachineLearning.Evaluation.ConfusionMatrix.GetNumberOfPredictions(System.String)">
            <summary>
            Gets total number of predictions made for items that actually belong to the given class
            </summary>
            <param name="trueLabel">Class to get number of predictions for</param>
            <returns>Number of predictions</returns>
        </member>
        <member name="M:LAIR.MachineLearning.Evaluation.ConfusionMatrix.GetNumberOfPredictions(System.String,System.String)">
            <summary>
            Gets the number of predictions for a particular true/predicted label combination
            </summary>
            <param name="trueLabel">True label to get predictions for</param>
            <param name="predictedLabel">Predicted label to get predictions for</param>
            <returns>Number of such predictions</returns>
        </member>
        <member name="M:LAIR.MachineLearning.Evaluation.ConfusionMatrix.GetTabular">
            <summary>
            Gets confusion matrix in tabular form
            </summary>
            <returns>Confusion matrix in tabular form</returns>
        </member>
        <member name="M:LAIR.MachineLearning.Evaluation.ConfusionMatrix.GetTabular(System.Collections.Generic.IList{System.String})">
            <summary>
            Gets confusion matrix in tabular form
            </summary>
            <param name="classLabels">Labels to include in table</param>
            <returns>Confusion matrix in tabular form</returns>
        </member>
        <member name="M:LAIR.MachineLearning.Evaluation.ConfusionMatrix.ToString">
            <summary>
            ToString override. Gets confusion matrix in tabular form.
            </summary>
            <returns>Confusion matrix in tabular form</returns>
        </member>
        <member name="M:LAIR.MachineLearning.Evaluation.ConfusionMatrix.WriteReport(System.String)">
            <summary>
            Writes confusion matrix report to file. Includes all classes in the tabular and per-class stats.
            </summary>
            <param name="path">File to write report to</param>
        </member>
        <member name="M:LAIR.MachineLearning.Evaluation.ConfusionMatrix.WriteReport(System.String,System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.String})">
            <summary>
            Writes report to file
            </summary>
            <param name="path">File to write report to</param>
            <param name="tabularClassLabels">Class labels to include in the tabular output</param>
            <param name="perClassStatsLabels">Class labels to write per-class stats for</param>
        </member>
        <member name="M:LAIR.MachineLearning.Evaluation.ConfusionMatrix.MergeWith(LAIR.MachineLearning.Evaluation.ConfusionMatrix)">
            <summary>
            Merges this matrix with another
            </summary>
            <param name="matrix">Matrix to merge this one with</param>
            <returns>Merged matrix</returns>
        </member>
        <member name="M:LAIR.MachineLearning.Evaluation.ConfusionMatrix.Equals(System.Object)">
            <summary>
            Checks whether the current matrix equals another matrix. Passed object must be a 
            non-null ConfusionMatrix over the same class labels.
            </summary>
            <param name="obj">Matrix to compare the current one to</param>
            <returns>True if matrices contain the same data, false otherwise</returns>
        </member>
        <member name="M:LAIR.MachineLearning.Evaluation.ConfusionMatrix.GetHashCode">
            <summary>
            Gets hash code for this matrix
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:LAIR.MachineLearning.Evaluation.ConfusionMatrix.GetCohensKappa">
            <summary>
            Treats the two dimensions of the confusion matrix as annotators and treats the cells of the matrix as 
            their annotations. Computes Cohen's Kappa agreement statistic.
            </summary>
            <returns>Cohen's Kappa statistic</returns>
        </member>
        <member name="P:LAIR.MachineLearning.Evaluation.ConfusionMatrix.Threshold">
            <summary>
            Gets or sets the threshold associated with this matrix. This is not set within the constructor. This member is not used within
            the ConfusionMatrix class. It is provided to external users of this class for bookkeeping purposes. Default:  float.NaN
            </summary>
        </member>
        <member name="P:LAIR.MachineLearning.Evaluation.ConfusionMatrix.Item(System.String)">
            <summary>
            Gets predicted labels/counts for a true label
            </summary>
            <param name="trueClassLabel">True label for which to get predicted labels (and their counts)</param>
            <returns>Predicted labels/counts</returns>
        </member>
        <member name="P:LAIR.MachineLearning.Evaluation.ConfusionMatrix.ClassLabels">
            <summary>
            Gets all class labels used in this matrix
            </summary>
        </member>
        <member name="P:LAIR.MachineLearning.Evaluation.ConfusionMatrix.TotalClassifications">
            <summary>
            Gets total number of classifications in this matrix
            </summary>
        </member>
        <member name="P:LAIR.MachineLearning.Evaluation.ConfusionMatrix.ClassLabelCount">
            <summary>
            Gets the number of class labels in this matrix
            </summary>
        </member>
        <member name="T:LAIR.MachineLearning.ClassifierWrappers.Weka.WekaDecisionTreeClassifier">
            <summary>
            Decision tree classifier
            </summary>
        </member>
        <member name="M:LAIR.MachineLearning.ClassifierWrappers.Weka.WekaDecisionTreeClassifier.#ctor(LAIR.MachineLearning.FeatureExtractor,System.String,System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="featureExtractor">Feature extractor</param>
            <param name="modelDirectory">Model directory</param>
            <param name="javaExePath">Path to Java executable</param>
            <param name="wekaJarPath">Path to Weka jar file</param>
        </member>
        <member name="P:LAIR.MachineLearning.ClassifierWrappers.Weka.WekaDecisionTreeClassifier.ClassifierClass">
            <summary>
            Gets the class for Weka decision trees
            </summary>
        </member>
        <member name="T:LAIR.MachineLearning.FeatureNameTransformation.MemoryNumericFeatureNameTransform">
            <summary>
            Transforms feature names into 1-based integer numbers. Everything is stored in memory.
            </summary>
        </member>
        <member name="M:LAIR.MachineLearning.FeatureNameTransformation.MemoryNumericFeatureNameTransform.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:LAIR.MachineLearning.FeatureNameTransformation.MemoryNumericFeatureNameTransform.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="path">Path to transform file</param>
        </member>
        <member name="M:LAIR.MachineLearning.FeatureNameTransformation.MemoryNumericFeatureNameTransform.#ctor(System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="size">Initialize size of transform</param>
        </member>
        <member name="M:LAIR.MachineLearning.FeatureNameTransformation.MemoryNumericFeatureNameTransform.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="size">Initialize size of transform</param>        
            <param name="start">Starting value</param>
        </member>
        <member name="M:LAIR.MachineLearning.FeatureNameTransformation.MemoryNumericFeatureNameTransform.Load(System.String)">
            <summary>
            Loads the transform from disk
            </summary>
            <param name="path">Path to load from</param>
        </member>
        <member name="M:LAIR.MachineLearning.FeatureNameTransformation.MemoryNumericFeatureNameTransform.GetFeatureNumber(System.String)">
            <summary>
            Gets 1-based feature number given a feature name
            </summary>
            <param name="featureName">Name of feature to transform</param>
            <returns>Feature number</returns>
        </member>
        <member name="M:LAIR.MachineLearning.FeatureNameTransformation.MemoryNumericFeatureNameTransform.Clear">
            <summary>
            Clears this name transform
            </summary>
        </member>
        <member name="M:LAIR.MachineLearning.FeatureNameTransformation.MemoryNumericFeatureNameTransform.Save(System.String)">
            <summary>
            Saves this transform to disk
            </summary>
            <param name="path">Path to save transform to</param>
        </member>
        <member name="M:LAIR.MachineLearning.FeatureNameTransformation.MemoryNumericFeatureNameTransform.GetEnumerator">
            <summary>
            Gets enumerator over list of feature names in this transform. Feature names are not sorted.
            </summary>
        </member>
        <member name="M:LAIR.MachineLearning.FeatureNameTransformation.MemoryNumericFeatureNameTransform.TryGetFeatureNumber(System.String,System.Int32@)">
            <summary>
            Tries to get a feature number for a feature name
            </summary>
            <param name="featureName">Name of feature to try to get number for</param>
            <param name="featureNumber">Number of feature, if successful</param>
            <returns>True if number was successfully retrieved, false otherwise</returns>
        </member>
        <member name="P:LAIR.MachineLearning.FeatureNameTransformation.MemoryNumericFeatureNameTransform.Count">
            <summary>
            Gets the number of features in this transform
            </summary>
        </member>
        <member name="P:LAIR.MachineLearning.FeatureNameTransformation.MemoryNumericFeatureNameTransform.SortedFeatureNames">
            <summary>
            Gets sorted list of feature names
            </summary>
        </member>
        <member name="T:LAIR.MachineLearning.FeatureNameTransformation.HashSearchNumericFeatureNameTransform">
            <summary>
            Stores (in memory) mapping of feature name hashes to positions on disk
            </summary>
        </member>
        <member name="M:LAIR.MachineLearning.FeatureNameTransformation.HashSearchNumericFeatureNameTransform.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="path">Path to transform file, or null if no initial transform is to be used</param>
        </member>
        <member name="T:LAIR.MachineLearning.FeatureVectorList">
            <summary>
            Represents a list of feature vectors
            </summary>
        </member>
        <member name="M:LAIR.MachineLearning.FeatureVectorList.#ctor(System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="initialCapacity">Initial capacity of the list</param>
        </member>
        <member name="M:LAIR.MachineLearning.FeatureVectorList.#ctor(System.Collections.Generic.List{LAIR.MachineLearning.FeatureVector})">
            <summary>
            Constructor
            </summary>
            <param name="featureVectors">Vectors to initialize this list with</param>
        </member>
        <member name="M:LAIR.MachineLearning.FeatureVectorList.Add(LAIR.MachineLearning.FeatureVector)">
            <summary>
            Adds a vector to this list
            </summary>
            <param name="featureVector">Feature vector to add</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:LAIR.MachineLearning.FeatureVectorList.Add(System.Collections.Generic.IEnumerable{LAIR.MachineLearning.FeatureVector})" -->
        <member name="M:LAIR.MachineLearning.FeatureVectorList.GetFeatureSpace">
            <summary>
            Gets the feature space instantiated by the vectors in this list
            </summary>
            <returns>Feature space</returns>
        </member>
        <member name="M:LAIR.MachineLearning.FeatureVectorList.Clear">
            <summary>
            Clears vectors from this list
            </summary>
        </member>
        <member name="M:LAIR.MachineLearning.FeatureVectorList.GetEnumerator">
            <summary>
            Gets an enumerator over vectors in this list
            </summary>
            <returns>Enumerator over vectors in this list</returns>
        </member>
        <member name="M:LAIR.MachineLearning.FeatureVectorList.RestrictFeatureSpace(LAIR.MachineLearning.FeatureSpaceRepresentation.FeatureSpace,System.Boolean,System.Boolean)">
            <summary>
            Calls RestrictFeatureSpace on all vectors in this list with the given feature space
            </summary>
            <param name="featureSpace">Feature space to use</param>
            <param name="requireNominalsInRange">Whether or not to require nominal features in this vector to have values that are
            present in the range of the corresponding feature in the given feature space.</param>
            <param name="requireNumericsInRange">Whether or not to require numeric features in this vector to have values that are
            within the range of the corresponding feature in the given feature space.</param>
        </member>
        <member name="M:LAIR.MachineLearning.FeatureVectorList.Insert(System.Int32,LAIR.MachineLearning.FeatureVector)">
            <summary>
            Inserts a feature vector at the given index
            </summary>
            <param name="index">Index</param>
            <param name="featureVector">Feature vector</param>
        </member>
        <member name="M:LAIR.MachineLearning.FeatureVectorList.System#Collections#Generic#IEnumerable{LAIR#MachineLearning#FeatureVector}#GetEnumerator">
            <summary>
            Gets an enumerator over feature vectors in this list
            </summary>
            <returns>An enumerator over feature vectors in this list</returns>
        </member>
        <member name="M:LAIR.MachineLearning.FeatureVectorList.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets an enumerator over feature vectors in this list
            </summary>
            <returns>An enumerator over feature vectors in this list</returns>
        </member>
        <member name="P:LAIR.MachineLearning.FeatureVectorList.Item(System.Int32)">
            <summary>
            Gets a vector in this list
            </summary>
            <param name="index">Index of vector to get</param>
            <returns>FeatureVector</returns>
        </member>
        <member name="P:LAIR.MachineLearning.FeatureVectorList.Count">
            <summary>
            Gets number of vectors
            </summary>
        </member>
        <member name="T:LAIR.MachineLearning.ClassifierWrappers.SvmLight.SvmLightFeatureVectorStringFEX">
            <summary>
            Extracts features from FeatureVectorStrings that are in SvmLight format
            </summary>
        </member>
        <member name="M:LAIR.MachineLearning.ClassifierWrappers.SvmLight.SvmLightFeatureVectorStringFEX.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:LAIR.MachineLearning.ClassifierWrappers.SvmLight.SvmLightFeatureVectorStringFEX.GetFeatureVector(LAIR.MachineLearning.ClassifiableEntity,System.Int32)">
            <summary>
            Gets a feature vector from a FeatureVectorTextLine object
            </summary>
            <param name="entity">Object to get feature vector from</param>
            <param name="featuresPerEntity">Number of features per entity</param>
            <returns>FeatureVector</returns>
        </member>
        <member name="T:LAIR.MachineLearning.ClassifierWrappers.SvmRank.SvmRankFeatureVectorReader">
            <summary>
            Reads SvmRank-style feature vector text files
            </summary>
        </member>
        <member name="M:LAIR.MachineLearning.ClassifierWrappers.SvmRank.SvmRankFeatureVectorReader.GetVectors(System.String)">
            <summary>
            Gets feature vectors from a file
            </summary>
            <param name="path">Path to file from which to get vectors</param>
            <returns>List of feature vectors</returns>
        </member>
        <member name="T:LAIR.MachineLearning.ClassifierWrappers.SvmLight.SvmLightClassifierClient">
            <summary>
            Provides access to Svm-Light server application
            </summary>
        </member>
        <member name="M:LAIR.MachineLearning.ClassifierWrappers.SvmLight.SvmLightClassifierClient.#ctor(LAIR.MachineLearning.FeatureNameTransformation.NumericFeatureNameTransform.AccessMethod,LAIR.MachineLearning.FeatureSpaceRepresentation.FeatureSpace.AccessMethod,System.Boolean,System.String,LAIR.MachineLearning.FeatureExtractor,System.Single)">
            <summary>
            Constructor
            </summary>
            <param name="featureNameTransformAccessMethod">Method of access to use for feature name transform</param>
            <param name="featureSpaceAccessMethod">Method of access to use for feature space</param>
            <param name="scaleNumericFeatureValues">Whether or not to scale numeric feature values when classifying new instances</param>
            <param name="modelDirectory">Model directory for this client. This directory must have a file named connection_params in it, 
            which has two lines. The first gives the host address, the second gives the host port.</param>
            <param name="featureExtractor">Feature extractor to use</param>
            <param name="labelConfidenceThreshold">Label confidence threshold</param>
        </member>
        <member name="M:LAIR.MachineLearning.ClassifierWrappers.SvmLight.SvmLightClassifierClient.ApplyPredictions(LAIR.MachineLearning.FeatureVectorList)">
            <summary>
            Applies current predictions to a list of feature vectors
            </summary>
            <param name="featureVectors">Feature vectors to apply predictions to</param>
        </member>
        <member name="T:LAIR.MachineLearning.NominalFeature">
            <summary>
            Represents non-numeric features
            </summary>
        </member>
        <member name="M:LAIR.MachineLearning.NominalFeature.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="name">Name of feature</param>
        </member>
        <member name="M:LAIR.MachineLearning.NominalFeature.#ctor(System.String,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="name">Name of feature</param>
            <param name="rangeSize">Initial range size</param>
        </member>
        <member name="M:LAIR.MachineLearning.NominalFeature.#ctor(System.String,System.Collections.Generic.ICollection{System.String})">
            <summary>
            Constructor
            </summary>
            <param name="name">Name of feature</param>
            <param name="range">Elements to initialize range with</param>
        </member>
        <member name="M:LAIR.MachineLearning.NominalFeature.IsWithinRange(System.String)">
            <summary>
            Checks whether or not a value is in the range of this feature
            </summary>
            <param name="value">Value to check</param>
            <returns>Try if value is in the range, false otherwise</returns>
        </member>
        <member name="M:LAIR.MachineLearning.NominalFeature.AddToRange(System.String)">
            <summary>
            Adds a value to this feature's range, or does nothing if the value already exists in the range
            </summary>
            <param name="value">Value to add</param>
            <returns>True if value was added as new, false if it was already in the range</returns>
        </member>
        <member name="M:LAIR.MachineLearning.NominalFeature.Copy">
            <summary>
            Gets a deep copy of this nominal feature
            </summary>
            <returns>NominalFeature</returns>
        </member>
        <member name="M:LAIR.MachineLearning.NominalFeature.Rename(System.String)">
            <summary>
            Renames the current feature, returning a new feature.
            </summary>
            <param name="newName">New name</param>
            <returns>New feature</returns>
        </member>
        <member name="M:LAIR.MachineLearning.NominalFeature.Equals(System.Object)">
            <summary>
            Gets whether or not this nominal feature equals another feature
            </summary>
            <param name="obj">Other feature</param>
            <returns>True if both features are nominal with the same name</returns>
        </member>
        <member name="M:LAIR.MachineLearning.NominalFeature.GetHashCode">
            <summary>
            Gets hash code for this feature
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="P:LAIR.MachineLearning.NominalFeature.Range">
            <summary>
            Gets the range of values for this nominal feature
            </summary>
        </member>
        <member name="T:LAIR.MachineLearning.Clustering.Cluto.ClutoClusteringSolution">
            <summary>
            Represents a Cluto clustering solution
            </summary>
        </member>
        <member name="T:LAIR.MachineLearning.Clustering.ClusteringSolution">
            <summary>
            Represents a clustering solution
            </summary>
        </member>
        <member name="M:LAIR.MachineLearning.Clustering.ClusteringSolution.Load(System.String)">
            <summary>
            Loads a clustering solution from disk
            </summary>
            <param name="loadPath">Path of file from which to load solution</param>
            <returns>Clustering solution</returns>
        </member>
        <member name="M:LAIR.MachineLearning.Clustering.ClusteringSolution.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:LAIR.MachineLearning.Clustering.ClusteringSolution.GetClusterByID(System.Int32)">
            <summary>
            Gets cluster with given ID
            </summary>
            <param name="id">ID of cluster to get</param>
            <returns>Cluster</returns>
        </member>
        <member name="M:LAIR.MachineLearning.Clustering.ClusteringSolution.TryGetClusterByID(System.Int32,LAIR.MachineLearning.Clustering.Cluster@)">
            <summary>
            Tries to get cluster with given ID
            </summary>
            <param name="id">ID of cluster to get</param>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:LAIR.MachineLearning.Clustering.ClusteringSolution.Add(LAIR.MachineLearning.Clustering.Cluster)">
            <summary>
            Adds a cluster to this solution
            </summary>
            <param name="c"></param>
        </member>
        <member name="M:LAIR.MachineLearning.Clustering.ClusteringSolution.Save(System.String)">
            <summary>
            Saves this clustering solution to disk
            </summary>
            <param name="savePath">Path of file to save solution to</param>
        </member>
        <member name="M:LAIR.MachineLearning.Clustering.ClusteringSolution.GetEnumerator">
            <summary>
            Gets enumerator over clusters in this solution
            </summary>
            <returns>Enumerator over clusters in this solution</returns>
        </member>
        <member name="P:LAIR.MachineLearning.Clustering.ClusteringSolution.NumberOfClusters">
            <summary>
            Gets the number of clusters contained in this solution
            </summary>
        </member>
        <member name="P:LAIR.MachineLearning.Clustering.ClusteringSolution.ID">
            <summary>
            Gets or sets the ID for this solution
            </summary>
        </member>
        <member name="P:LAIR.MachineLearning.Clustering.ClusteringSolution.AverageClusterSize">
            <summary>
            Gets the average cluster size of this solution
            </summary>
        </member>
        <member name="M:LAIR.MachineLearning.Clustering.Cluto.ClutoClusteringSolution.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="id">ID of this solution</param>
        </member>
        <member name="P:LAIR.MachineLearning.Clustering.Cluto.ClutoClusteringSolution.CriterionFunctionValue">
            <summary>
            Gets or sets the value of the criterion function for this solution
            </summary>
        </member>
        <member name="P:LAIR.MachineLearning.Clustering.Cluto.ClutoClusteringSolution.ClusteringMethod">
            <summary>
            Gets or sets the clustering method
            </summary>
        </member>
        <member name="P:LAIR.MachineLearning.Clustering.Cluto.ClutoClusteringSolution.ClusterSelection">
            <summary>
            Gets or sets the cluster selection heuristic
            </summary>
        </member>
        <member name="P:LAIR.MachineLearning.Clustering.Cluto.ClutoClusteringSolution.CriterionFunction">
            <summary>
            Gets or sets the criterion function
            </summary>
        </member>
        <member name="P:LAIR.MachineLearning.Clustering.Cluto.ClutoClusteringSolution.SimilarityFunction">
            <summary>
            Gets or sets the similarity function
            </summary>
        </member>
        <member name="P:LAIR.MachineLearning.Clustering.Cluto.ClutoClusteringSolution.AverageInternalSimilarityOfClusters">
            <summary>
            Gets the average internal similarity of the clusters
            </summary>
        </member>
        <member name="P:LAIR.MachineLearning.Clustering.Cluto.ClutoClusteringSolution.AverageInternalSimilarityStdDevOfClusters">
            <summary>
            Gets the average standard deviation of internal similarity scores of the clusters
            </summary>
        </member>
        <member name="P:LAIR.MachineLearning.Clustering.Cluto.ClutoClusteringSolution.AverageExternalSimilarityOfClusters">
            <summary>
            Gets the average external similarity of the clusters
            </summary>
        </member>
        <member name="P:LAIR.MachineLearning.Clustering.Cluto.ClutoClusteringSolution.AverageExternalSimilarityStdDevOfClusters">
            <summary>
            Gets the average standard deviation of external similarity scores of the clusters
            </summary>
        </member>
        <member name="T:LAIR.MachineLearning.Clustering.Cluto.ClutoClusteringSolution.CriterionFunctionSolutionComparer">
            <summary>
            Compares to Cluto clusterings based on their criterion function values
            </summary>
        </member>
        <member name="M:LAIR.MachineLearning.Clustering.Cluto.ClutoClusteringSolution.CriterionFunctionSolutionComparer.Compare(LAIR.MachineLearning.Clustering.Cluto.ClutoClusteringSolution,LAIR.MachineLearning.Clustering.Cluto.ClutoClusteringSolution)">
            <summary>
            Compares to Cluto clusterings based on thier criterion function values
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="T:LAIR.MachineLearning.ClassifierWrappers.SvmRank.SvmRankClassifier">
            <summary>
            Wrapper for the SVM Rank classifier. Any calls to classify assume that the classified feature 
            vectors are to be ranked against each other.
            </summary>
        </member>
        <member name="M:LAIR.MachineLearning.ClassifierWrappers.SvmRank.SvmRankClassifier.ApplyPredictions(System.String,LAIR.MachineLearning.FeatureVectorList)">
            <summary>
            Applies predictions from a file to classified feature vectors
            </summary>
            <param name="predictionsPath">Prediction output</param>
            <param name="featureVectors">Feature vectors to apply predictions to</param>
        </member>
        <member name="M:LAIR.MachineLearning.ClassifierWrappers.SvmRank.SvmRankClassifier.#ctor(System.Single,LAIR.MachineLearning.FeatureNameTransformation.NumericFeatureNameTransform.AccessMethod,LAIR.MachineLearning.FeatureSpaceRepresentation.FeatureSpace.AccessMethod,System.Boolean,System.String,System.String,System.String,LAIR.MachineLearning.FeatureExtractor,System.Single)">
            <summary>
            Constructor
            </summary>
            <param name="c">Trade-off between training error and margin</param>
            <param name="featureNameTransformAccessMethod">Method of access for feature name transform</param>
            <param name="featureSpaceAccessMethod">Method of access for feature space</param>
            <param name="scaleNumericFeatureValues">Scale numeric feature values</param>
            <param name="modelDirectory">Directory to store model files in</param>
            <param name="learnExePath">Path to LibLinear learn executable</param>
            <param name="classifyExePath">Path to LibLinear classify executable</param>
            <param name="featureExtractor">Feature extractor to use</param>
            <param name="labelConfidenceThreshold">Confidence threshold for labels</param>
        </member>
        <member name="M:LAIR.MachineLearning.ClassifierWrappers.SvmRank.SvmRankClassifier.PreLearn">
            <summary>
            Called just before learning
            </summary>
        </member>
        <member name="M:LAIR.MachineLearning.ClassifierWrappers.SvmRank.SvmRankClassifier.GetSpaceBeforeFeatures(System.String)">
            <summary>
            Gets index of space before feature-value pairs
            </summary>
            <param name="vector">Feature vector</param>
            <returns>Index of space</returns>
        </member>
        <member name="M:LAIR.MachineLearning.ClassifierWrappers.SvmRank.SvmRankClassifier.GetLearnProcessArguments">
            <summary>
            Gets learning process arguments
            </summary>
            <returns></returns>
        </member>
        <member name="M:LAIR.MachineLearning.ClassifierWrappers.SvmRank.SvmRankClassifier.GetClassifyProcessArguments">
            <summary>
            Gets classification process arguments
            </summary>
            <returns></returns>
        </member>
        <member name="M:LAIR.MachineLearning.ClassifierWrappers.SvmRank.SvmRankClassifier.PreClassify(LAIR.MachineLearning.FeatureVectorList)">
            <summary>
            Called just before classification. Sets the qid for each feature vector to be the same.
            </summary>
            <param name="featureVectors">Feature vectors to rank</param>
        </member>
        <member name="M:LAIR.MachineLearning.ClassifierWrappers.SvmRank.SvmRankClassifier.PostClassify(LAIR.MachineLearning.FeatureVectorList)">
            <summary>
            Applies predictions and cleans up
            </summary>
            <param name="featureVectors">Feature vectors that have been classified</param>
        </member>
        <member name="P:LAIR.MachineLearning.ClassifierWrappers.SvmRank.SvmRankClassifier.PredictionsFileName">
            <summary>
            Gets the name of the predictions file name
            </summary>
        </member>
        <member name="P:LAIR.MachineLearning.ClassifierWrappers.SvmRank.SvmRankClassifier.PredictionsPath">
            <summary>
            Gets the path to the predictions file
            </summary>
        </member>
        <member name="P:LAIR.MachineLearning.ClassifierWrappers.SvmRank.SvmRankClassifier.ModelFiles">
            <summary>
            Gets files used in SVM Light models
            </summary>
        </member>
        <member name="T:LAIR.MachineLearning.ClassifierWrappers.SvmLight.SvmLightClassifier">
            <summary>
            Wrapper for the SVM Light classifier
            </summary>
        </member>
        <member name="M:LAIR.MachineLearning.ClassifierWrappers.SvmLight.SvmLightClassifier.ApplyPredictions(System.String,LAIR.MachineLearning.FeatureVectorList,LAIR.MachineLearning.LabelMap)">
            <summary>
            Applies classification predictions to a list of feature vectors
            </summary>
            <param name="predictionsPath">Path to predictions file</param>
            <param name="featureVectors">Feature vectors to apply predictions to</param>
            <param name="labelMap">Label map to use</param>
        </member>
        <member name="M:LAIR.MachineLearning.ClassifierWrappers.SvmLight.SvmLightClassifier.#ctor(LAIR.MachineLearning.FeatureNameTransformation.NumericFeatureNameTransform.AccessMethod,LAIR.MachineLearning.FeatureSpaceRepresentation.FeatureSpace.AccessMethod,System.Boolean,System.String,System.String,System.String,LAIR.MachineLearning.FeatureExtractor,System.Single)">
            <summary>
            Constructor
            </summary>
            <param name="featureNameTransformAccessMethod">Method of access for feature name transform</param>
            <param name="featureSpaceAccessMethod">Method of access for feature space</param>
            <param name="scaleNumericFeatureValues">Scale numeric feature values</param>
            <param name="modelDirectory">Directory to store model files in</param>
            <param name="learnExePath">Path to LibLinear learn executable</param>
            <param name="classifyExePath">Path to LibLinear classify executable</param>
            <param name="featureExtractor">Feature extractor to use</param>
            <param name="labelConfidenceThreshold">Confidence threshold for labels</param>
        </member>
        <member name="M:LAIR.MachineLearning.ClassifierWrappers.SvmLight.SvmLightClassifier.PreConsumeTrainingVectors">
            <summary>
            Called just before the first training vectors are consumed
            </summary>
        </member>
        <member name="M:LAIR.MachineLearning.ClassifierWrappers.SvmLight.SvmLightClassifier.PreLearn">
            <summary>
            Called just before learning
            </summary>
        </member>
        <member name="M:LAIR.MachineLearning.ClassifierWrappers.SvmLight.SvmLightClassifier.GetSpaceBeforeFeatures(System.String)">
            <summary>
            Gets index of space before feature-value pairs
            </summary>
            <param name="vector">Feature vector</param>
            <returns>Index of space</returns>
        </member>
        <member name="M:LAIR.MachineLearning.ClassifierWrappers.SvmLight.SvmLightClassifier.GetLearnProcessArguments">
            <summary>
            Gets learn executable process arguments
            </summary>
            <returns></returns>
        </member>
        <member name="M:LAIR.MachineLearning.ClassifierWrappers.SvmLight.SvmLightClassifier.GetClassifyProcessArguments">
            <summary>
            Gets classify executable process arguments
            </summary>
            <returns></returns>
        </member>
        <member name="M:LAIR.MachineLearning.ClassifierWrappers.SvmLight.SvmLightClassifier.PostClassify(LAIR.MachineLearning.FeatureVectorList)">
            <summary>
            Applies predictions and cleans up
            </summary>
            <param name="featureVectors">Feature vectors that have been classified</param>
        </member>
        <member name="P:LAIR.MachineLearning.ClassifierWrappers.SvmLight.SvmLightClassifier.PredictionsFileName">
            <summary>
            Gets the name of the predictions file name
            </summary>
        </member>
        <member name="P:LAIR.MachineLearning.ClassifierWrappers.SvmLight.SvmLightClassifier.UseDefaultC">
            <summary>
            Gets or sets whether or not to use the default C parameter
            </summary>
        </member>
        <member name="P:LAIR.MachineLearning.ClassifierWrappers.SvmLight.SvmLightClassifier.UseDefaultGamma">
            <summary>
            Gets or sets whether or not to use the default gamma parameter
            </summary>
        </member>
        <member name="P:LAIR.MachineLearning.ClassifierWrappers.SvmLight.SvmLightClassifier.C">
            <summary>
            Tradeoff between training error and margin
            </summary>
        </member>
        <member name="P:LAIR.MachineLearning.ClassifierWrappers.SvmLight.SvmLightClassifier.Kernel">
            <summary>
            Gets or sets the kernel type
            </summary>
        </member>
        <member name="P:LAIR.MachineLearning.ClassifierWrappers.SvmLight.SvmLightClassifier.PolyDegree">
            <summary>
            Gets or sets the degree of polynomial kernels
            </summary>
        </member>
        <member name="P:LAIR.MachineLearning.ClassifierWrappers.SvmLight.SvmLightClassifier.RBFGamma">
            <summary>
            Gets or sets the gamma parameter for RBF kernels
            </summary>
        </member>
        <member name="P:LAIR.MachineLearning.ClassifierWrappers.SvmLight.SvmLightClassifier.PredictionsPath">
            <summary>
            Gets the path to the predictions file
            </summary>
        </member>
        <member name="P:LAIR.MachineLearning.ClassifierWrappers.SvmLight.SvmLightClassifier.ModelFiles">
            <summary>
            Gets files used in SVM Light models
            </summary>
        </member>
        <member name="T:LAIR.MachineLearning.ClassifierWrappers.SvmLight.SvmLightClassifier.KernelType">
            <summary>
            Kernel types
            </summary>
        </member>
        <member name="F:LAIR.MachineLearning.ClassifierWrappers.SvmLight.SvmLightClassifier.KernelType.Linear">
            <summary>
            Linear kernel
            </summary>
        </member>
        <member name="F:LAIR.MachineLearning.ClassifierWrappers.SvmLight.SvmLightClassifier.KernelType.Polynomial">
            <summary>
            Polynomial kernel
            </summary>
        </member>
        <member name="F:LAIR.MachineLearning.ClassifierWrappers.SvmLight.SvmLightClassifier.KernelType.RadialBasisFunction">
            <summary>
            RBF kernel
            </summary>
        </member>
        <member name="F:LAIR.MachineLearning.ClassifierWrappers.SvmLight.SvmLightClassifier.KernelType.SigmoidTanH">
            <summary>
            Sigmoid tanh kernel
            </summary>
        </member>
        <member name="T:LAIR.MachineLearning.HiddenMarkovModeling.HMM">
            <summary>
            Represents a hidden Markov model
            </summary>
        </member>
        <member name="M:LAIR.MachineLearning.HiddenMarkovModeling.HMM.ComputeTransitionProbabilities(System.Collections.Generic.Dictionary{System.Int32,System.Collections.Generic.Dictionary{System.Int32,System.Int32}})">
            <summary>
            Computes transition probabilities from transition counts. Counts must already be smoothed.
            </summary>
            <param name="transitionCounts">Transition counts</param>
            <returns>Transition probabilities</returns>
        </member>
        <member name="M:LAIR.MachineLearning.HiddenMarkovModeling.HMM.ComputeTransitionProbabilities(System.Collections.Generic.Dictionary{System.Int32,System.Collections.Generic.Dictionary{System.Int32,System.Int32}},System.Collections.Generic.Dictionary{System.Int32,System.Int32}@,System.Collections.Generic.Dictionary{System.Int32,System.Int32}@,System.Int32@)">
            <summary>
            Computes transition probabilities from transition counts. Counts must already be smoothed.
            </summary>
            <param name="transitionCounts">Transition counts</param>
            <param name="sourceTotals">Number of times each state is the source of a transition</param>
            <param name="destTotals">Number of times each state is the destination of a transition</param>
            <param name="totalTransitions">Total number of transitions</param>
            <returns>Transition probabilities</returns>
        </member>
        <member name="F:LAIR.MachineLearning.HiddenMarkovModeling.HMM._timeSlices">
            <summary>
            One-based map from time points to time slices
            </summary>
        </member>
        <member name="F:LAIR.MachineLearning.HiddenMarkovModeling.HMM._observations">
            <summary>
            Sequential list of observations. _observations[0] corresponds to _timeSlice[1]
            </summary>
        </member>
        <member name="F:LAIR.MachineLearning.HiddenMarkovModeling.HMM._stateNumberNames">
            <summary>
            Maps state numbers to state names
            </summary>
        </member>
        <member name="F:LAIR.MachineLearning.HiddenMarkovModeling.HMM._stateNameNumbers">
            <summary>
            Maps state names to state numbers
            </summary>
        </member>
        <member name="F:LAIR.MachineLearning.HiddenMarkovModeling.HMM._transitionProbabilities">
            <summary>
            Transition probability matrix. State numbers must start at 1, with a special state 0 being the state
            from which all transitions to states at T=1 originate.
            </summary>
        </member>
        <member name="F:LAIR.MachineLearning.HiddenMarkovModeling.HMM._observationProbabilities">
            <summary>
            Observation probabilities
            </summary>
        </member>
        <member name="M:LAIR.MachineLearning.HiddenMarkovModeling.HMM.#ctor(System.Collections.Generic.Dictionary{System.Int32,System.Collections.Generic.Dictionary{System.Int32,System.Double}},System.Collections.Generic.Dictionary{System.Int32,System.Collections.Generic.Dictionary{LAIR.MachineLearning.ClassifiableEntity,System.Double}},System.Collections.Generic.Dictionary{System.Int32,System.String})">
            <summary>
            Constructor
            </summary>
            <param name="transitionProbabilities">Transition probability matrix. Must include special transition probabilities
            from state 0 to all other states, which indicate the initial probabilities for states.</param>
            <param name="observationProbabilities">Observation probabilities</param>
            <param name="stateNames">State names</param>
        </member>
        <member name="M:LAIR.MachineLearning.HiddenMarkovModeling.HMM.CreateLattice(System.Collections.Generic.List{LAIR.MachineLearning.ClassifiableEntity})">
            <summary>
            Creates an HMM lattice given a sequence of observations
            </summary>
            <param name="observations">Observation sequence</param>
        </member>
        <member name="M:LAIR.MachineLearning.HiddenMarkovModeling.HMM.GetTimeSlice(System.Int32)">
            <summary>
            Gets state nodes at a time slice. A time slice can be thought of as a vertical cut through the HMM graph.
            </summary>
            <param name="t">Time at which to get nodes</param>
            <returns>HMM nodes</returns>
        </member>
        <member name="M:LAIR.MachineLearning.HiddenMarkovModeling.HMM.GetStateNumber(System.String)">
            <summary>
            Gets the number of a state by its name
            </summary>
            <param name="stateName">Name for which to get number</param>
            <returns>State number</returns>
        </member>
        <member name="M:LAIR.MachineLearning.HiddenMarkovModeling.HMM.GetStateName(System.Int32)">
            <summary>
            Gets the name of a state by its number
            </summary>
            <param name="stateNumber">Number for which to get name</param>
            <returns>State name</returns>
        </member>
        <member name="M:LAIR.MachineLearning.HiddenMarkovModeling.HMM.GetNBestSequences(System.Int32)">
            <summary>
            Not implemented
            </summary>
            <param name="n"></param>
            <returns></returns>
        </member>
        <member name="M:LAIR.MachineLearning.HiddenMarkovModeling.HMM.GetTransitionProbability(System.Int32,System.Int32)">
            <summary>
            Gets transition probability between two states
            </summary>
            <param name="fromState">First state</param>
            <param name="toState">Second state</param>
            <returns>Transition probability</returns>
        </member>
        <member name="M:LAIR.MachineLearning.HiddenMarkovModeling.HMM.GetObservation(System.Int32)">
            <summary>
            Gets the observation at a given time
            </summary>
            <returns>Observation at the given time</returns>
        </member>
        <member name="M:LAIR.MachineLearning.HiddenMarkovModeling.HMM.GetObservationProbability(System.Int32,LAIR.MachineLearning.ClassifiableEntity)">
            <summary>
            Gets the probability of an observation
            </summary>
            <param name="state">State that generates an observation</param>
            <param name="observation">Observation generated</param>
            <returns>Probability of the given state generating the given observation</returns>
        </member>
        <member name="P:LAIR.MachineLearning.HiddenMarkovModeling.HMM.StartNodes">
            <summary>
            Gets the start nodes
            </summary>
        </member>
        <member name="P:LAIR.MachineLearning.HiddenMarkovModeling.HMM.EndNodes">
            <summary>
            Gets the end nodes
            </summary>
        </member>
        <member name="P:LAIR.MachineLearning.HiddenMarkovModeling.HMM.MostLikelyEndNode">
            <summary>
            Gets the most likely end node
            </summary>
        </member>
        <member name="P:LAIR.MachineLearning.HiddenMarkovModeling.HMM.TimeSteps">
            <summary>
            Gets number of time steps used in HMM
            </summary>
        </member>
        <member name="T:LAIR.MachineLearning.Clustering.Cluto.ClutoCluster">
            <summary>
            Represents a Cluto cluster
            </summary>
        </member>
        <member name="T:LAIR.MachineLearning.Clustering.Cluster">
            <summary>
            Represents a cluster of feature vectors
            </summary>
        </member>
        <member name="M:LAIR.MachineLearning.Clustering.Cluster.#ctor(System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="id">ID of cluster</param>
        </member>
        <member name="P:LAIR.MachineLearning.Clustering.Cluster.ID">
            <summary>
            Gets or sets the ID of this cluster
            </summary>
        </member>
        <member name="P:LAIR.MachineLearning.Clustering.Cluster.Size">
            <summary>
            Gets the size of this cluster
            </summary>
        </member>
        <member name="P:LAIR.MachineLearning.Clustering.Cluster.FeatureVectors">
            <summary>
            Gets or sets the feature vectors in this cluster
            </summary>
        </member>
        <member name="T:LAIR.MachineLearning.Clustering.Cluster.ClusterIdComparer">
            <summary>
            Compares two clusters using their IDs
            </summary>
        </member>
        <member name="M:LAIR.MachineLearning.Clustering.Cluster.ClusterIdComparer.Compare(LAIR.MachineLearning.Clustering.Cluster,LAIR.MachineLearning.Clustering.Cluster)">
            <summary>
            Compares two clusters using their IDs
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:LAIR.MachineLearning.Clustering.Cluto.ClutoCluster.#ctor(System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="id">ID of cluster</param>
        </member>
        <member name="P:LAIR.MachineLearning.Clustering.Cluto.ClutoCluster.AvgInternalSimilarity">
            <summary>
            Gets or sets the average internal similarity of vectors in this cluster
            </summary>
        </member>
        <member name="P:LAIR.MachineLearning.Clustering.Cluto.ClutoCluster.InternalSimilarityStdDev">
            <summary>
            Gets or sets the standard deviation of the internal similarity of vectors in this cluster
            </summary>
        </member>
        <member name="P:LAIR.MachineLearning.Clustering.Cluto.ClutoCluster.AvgExternalSimilarity">
            <summary>
            Gets or sets the average external similarity of cluster
            </summary>
        </member>
        <member name="P:LAIR.MachineLearning.Clustering.Cluto.ClutoCluster.ExternalSimilarityStdDev">
            <summary>
            Gets or sets the standard deviation of the external similarity
            </summary>
        </member>
        <member name="P:LAIR.MachineLearning.Clustering.Cluto.ClutoCluster.DescriptiveFeatures">
            <summary>
            Gets or sets the descriptive features for this cluster
            </summary>
        </member>
        <member name="P:LAIR.MachineLearning.Clustering.Cluto.ClutoCluster.DiscriminatingFeatures">
            <summary>
            Gets or sets the discriminative features for this cluster
            </summary>
        </member>
        <member name="T:LAIR.MachineLearning.ClassifierTrainer">
            <summary>
            Abstract base class for classes that build classification models
            </summary>
        </member>
        <member name="M:LAIR.MachineLearning.ClassifierTrainer.#ctor(LAIR.MachineLearning.Classifier)">
            <summary>
            Constructor
            </summary>
            <param name="classifier">Classifier to train</param>
        </member>
        <member name="M:LAIR.MachineLearning.ClassifierTrainer.Train(LAIR.MachineLearning.TrainingInstanceProvider,System.Int32,System.Int32)">
            <summary>
            Train a classification model
            </summary>
            <param name="instanceProvider">Training instance provider</param>
            <param name="consumeTrainingEntitiesAfter">How many training entities to collect before making the classifier consume them. This should be set
            based on memory requirements. If this function fails with an OutOfMemory exception, try making this lower.</param>
            <param name="maxTrainingInstances">Maximum number of training instances to use</param>
        </member>
        <member name="M:LAIR.MachineLearning.ClassifierTrainer.ConsumeTrainingEntities(LAIR.MachineLearning.ClassifiableEntityList)">
            <summary>
            Causes classifier to consume training entities
            </summary>
            <param name="entities">Current list of entities</param>
        </member>
        <member name="M:LAIR.MachineLearning.ClassifierTrainer.UpdateStatus(System.String)">
            <summary>
            Fires OnUpdateStatus event for subscribers
            </summary>
            <param name="newStatus">New status to send to subscribers</param>
        </member>
        <member name="E:LAIR.MachineLearning.ClassifierTrainer.OnUpdateStatus">
            <summary>
            Fired when status is updated
            </summary>
        </member>
        <member name="P:LAIR.MachineLearning.ClassifierTrainer.Classifier">
            <summary>
            Gets the classifier trained
            </summary>
        </member>
        <member name="T:LAIR.MachineLearning.HPCC.HPCC">
            <summary>
            Provides miscellaneous routines for working with the High Performance Computing Center
            </summary>
        </member>
        <member name="M:LAIR.MachineLearning.HPCC.HPCC.CreateSubmissionScript(System.String)">
            <summary>
            Creates an HPCC job submission startup script for all training instance files at or below a directory. The training instances files
            must be named "training_instances".
            </summary>
            <param name="parentDirectory">Directory to search recursively for training instance files</param>
        </member>
        <member name="M:LAIR.MachineLearning.HPCC.HPCC.CreateSubmissionScriptRecursive(System.String,System.String@,System.String,System.Int32,System.Int32@)">
            <summary>
            Scans directory recursively for training instance files
            </summary>
            <param name="trainingDirectory">Path to training directory</param>
            <param name="scriptPath">Path to submission script</param>
            <param name="trainingParentDirectory">Path to top-level training directory</param>
            <param name="maxSubmissionsPerFile">Maximum number of submissions per file</param>
            <param name="submissionsSoFar">Number of submissions created so far</param>
        </member>
        <member name="M:LAIR.MachineLearning.HPCC.HPCC.GetNextScriptPath(System.String)">
            <summary>
            Gets path for next script
            </summary>
            <param name="currentPath">Current script</param>
            <returns>Path to next submissions script</returns>
        </member>
        <member name="T:LAIR.MachineLearning.Evaluation.EvaluationPair">
            <summary>
            Represents an evaluation pair, which comprises a true entity and an entity that should be automatically classified.
            </summary>
        </member>
        <member name="M:LAIR.MachineLearning.Evaluation.EvaluationPair.#ctor(LAIR.MachineLearning.ClassifiableEntity,LAIR.MachineLearning.ClassifiableEntity)">
            <summary>
            Constructor
            </summary>
            <param name="trueEntity">True entity of this pair</param>
            <param name="predictedEntity">Predicted entity of this pair</param>
        </member>
        <member name="P:LAIR.MachineLearning.Evaluation.EvaluationPair.TrueEntity">
            <summary>
            Gets or sets the true entity for this pair
            </summary>
        </member>
        <member name="P:LAIR.MachineLearning.Evaluation.EvaluationPair.PredictedEntity">
            <summary>
            Gets or sets the predicted entity for this pair
            </summary>
        </member>
        <member name="T:LAIR.MachineLearning.ConfidenceScores">
            <summary>
            Maps class labels to their confidence scores
            </summary>
        </member>
        <member name="M:LAIR.MachineLearning.ConfidenceScores.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:LAIR.MachineLearning.ConfidenceScores.PredictedClass">
            <summary>
            Gets the predicted (highest-scoring) class for this set of confidence scores
            </summary>
        </member>
        <member name="P:LAIR.MachineLearning.ConfidenceScores.PredictionConfidence">
            <summary>
            Gets the confidence for the predicted class in this set of confidence scores
            </summary>
        </member>
        <member name="T:LAIR.MachineLearning.RandomBinaryClassifier">
            <summary>
            Classifies binary-labeled feature vectors by assigning them random scores
            </summary>
        </member>
        <member name="M:LAIR.MachineLearning.RandomBinaryClassifier.#ctor(System.String,System.String,System.Single,System.Single,LAIR.MachineLearning.FeatureExtractor)">
            <summary>
            Constructor
            </summary>
            <param name="label1">Binary label 1</param>
            <param name="label2">Binary label 2</param>
            <param name="rangeMinimum">Minimum confidence value</param>
            <param name="rangeMaximum">Maximum confidence value</param>
            <param name="fex">FEX placeholder...not used.</param>
        </member>
        <member name="M:LAIR.MachineLearning.RandomBinaryClassifier.Classify(LAIR.MachineLearning.FeatureVectorList)">
            <summary>
            Randomly applies binary labels to a list of feature vectors
            </summary>
            <param name="featureVectors">Feature vectors to classify randomly</param>
        </member>
        <member name="M:LAIR.MachineLearning.RandomBinaryClassifier.LabelIsValid(System.String)">
            <summary>
            Checks whether a label is valid
            </summary>
            <param name="label">Label to check</param>
            <returns>True if label is valid, false otherwise.</returns>
        </member>
        <member name="M:LAIR.MachineLearning.RandomBinaryClassifier.Learn">
            <summary>
            Not implemented
            </summary>
        </member>
        <member name="P:LAIR.MachineLearning.RandomBinaryClassifier.Labels">
            <summary>
            Gets the labels that can be randomly assigned
            </summary>
        </member>
        <member name="T:LAIR.MachineLearning.Evaluation.EvaluationPoint">
            <summary>
            EvaluationPoint class
            </summary>
        </member>
        <member name="M:LAIR.MachineLearning.Evaluation.EvaluationPoint.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:LAIR.MachineLearning.Evaluation.EvaluationPoint.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Constructor
            </summary>
            <param name="precision"></param>
            <param name="recall"></param>
            <param name="fMeasure"></param>
            <param name="accuracy"></param>
        </member>
        <member name="M:LAIR.MachineLearning.Evaluation.EvaluationPoint.#ctor(System.Single,System.Single,System.Single,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="precision"></param>
            <param name="recall"></param>
            <param name="fMeasure"></param>
            <param name="time"></param>
        </member>
        <member name="M:LAIR.MachineLearning.Evaluation.EvaluationPoint.ToString">
            <summary>
            ToString override
            </summary>
            <returns></returns>
        </member>
        <member name="P:LAIR.MachineLearning.Evaluation.EvaluationPoint.Accuracy">
            <summary>
            Gets or sets the accuracy
            </summary>
        </member>
        <member name="P:LAIR.MachineLearning.Evaluation.EvaluationPoint.Time">
            <summary>
            Gets or sets the time of this point
            </summary>
        </member>
        <member name="P:LAIR.MachineLearning.Evaluation.EvaluationPoint.Precision">
            <summary>
            Gets or sets the precision for this point
            </summary>
        </member>
        <member name="P:LAIR.MachineLearning.Evaluation.EvaluationPoint.Recall">
            <summary>
            Gets or sets the recall for this point
            </summary>
        </member>
        <member name="P:LAIR.MachineLearning.Evaluation.EvaluationPoint.FMeasure">
            <summary>
            Gets or sets the f-measure for this point
            </summary>
        </member>
        <member name="T:LAIR.MachineLearning.FeatureVectorStringList">
            <summary>
            Represents a list of FeatureVectorStrings
            </summary>
        </member>
        <member name="T:LAIR.MachineLearning.FeatureSpaceRepresentation.MemoryFeatureSpace">
            <summary>
            Represents a feature space in memory
            </summary>
        </member>
        <member name="F:LAIR.MachineLearning.FeatureSpaceRepresentation.MemoryFeatureSpace._features">
            <summary>
            Dictionary of features, keyed/valued by the same feature. This is used because feature lookup is done often and
            needs to be quick. The dictionary is valued on the same feature because Feature hash codes are computed on the
            basis of the Feature name, so to look up a feature by name when all we have is some other feature with the 
            same name, we need a value that is a reference to the intended feature.
            </summary>
        </member>
        <member name="M:LAIR.MachineLearning.FeatureSpaceRepresentation.MemoryFeatureSpace.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:LAIR.MachineLearning.FeatureSpaceRepresentation.MemoryFeatureSpace.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="path">Path to feature space file</param>
        </member>
        <member name="M:LAIR.MachineLearning.FeatureSpaceRepresentation.MemoryFeatureSpace.Add(LAIR.MachineLearning.Feature)">
            <summary>
            Adds a feature to this space. If the feature already exists and is a nominal feature, the existing feature's range 
            is updated with new values from the given nominal feature. If the feature already exists and is a numeric feature,
            the existing numeric feature's range is updated to include the given feature's range.
            </summary>
            <param name="feature">Feature to add</param>
        </member>
        <member name="M:LAIR.MachineLearning.FeatureSpaceRepresentation.MemoryFeatureSpace.Add(LAIR.MachineLearning.FeatureSpaceRepresentation.MemoryFeatureSpace)">
            <summary>
            Adds another feature space to this one. Same as calling MemoryFeatureSpace.Add on each feature in the given feature space.
            </summary>
            <param name="featureSpace">Feature space to add to this one</param>
        </member>
        <member name="M:LAIR.MachineLearning.FeatureSpaceRepresentation.MemoryFeatureSpace.Add(System.IO.StreamReader)">
            <summary>
            Adds features from a file to this feature space. File must be open and positioned at the start of a feature declaration.
            </summary>
            <param name="featureFile">File from which to read</param>
        </member>
        <member name="M:LAIR.MachineLearning.FeatureSpaceRepresentation.MemoryFeatureSpace.Remove(LAIR.MachineLearning.Feature)">
            <summary>
            Removes a feature from this space
            </summary>
            <param name="feature">Feature to remove</param>
        </member>
        <member name="M:LAIR.MachineLearning.FeatureSpaceRepresentation.MemoryFeatureSpace.Save(System.String,System.Boolean)">
            <summary>
            Saves this feature space to file
            </summary>
            <param name="path">Path to file where feature space should be saved</param>
            <param name="append">Whether or not to append the current feature space to the given file, if it exists. If this is true,
            the feature space will need to be condensed with FeatureSpace.Condense before it can used.</param>
        </member>
        <member name="M:LAIR.MachineLearning.FeatureSpaceRepresentation.MemoryFeatureSpace.TryGetFeature(LAIR.MachineLearning.Feature,LAIR.MachineLearning.Feature@)">
            <summary>
            Tries to get the feature from this space that corresponds to a given feature. The matching criterion
            is the feature name.
            </summary>
            <param name="feature">Feature whose corresponding feature from this list should be returned</param>
            <param name="fromSpace">Feature from this space corresponding to given feature</param>
            <returns>True if feature was found, false otherwise</returns>
        </member>
        <member name="M:LAIR.MachineLearning.FeatureSpaceRepresentation.MemoryFeatureSpace.Clear">
            <summary>
            Clears this feature space
            </summary>
        </member>
        <member name="M:LAIR.MachineLearning.FeatureSpaceRepresentation.MemoryFeatureSpace.Contains(LAIR.MachineLearning.Feature)">
            <summary>
            Gets whether or not this space contains a feature
            </summary>
            <param name="feature">Feature to check for</param>
            <returns>True if feature is contained, false otherwise</returns>
        </member>
        <member name="M:LAIR.MachineLearning.FeatureSpaceRepresentation.MemoryFeatureSpace.Contains(LAIR.MachineLearning.Feature,System.Object)">
            <summary>
            Gets whether or not this space contains a feature/value pair. If the feature is nominal, the value must be in it's range.
            If the feature is numeric, the feature value must parse as a double and be in the numeric range.
            </summary>
            <param name="feature">Feature to check</param>
            <param name="featureValue">Value to check</param>
            <returns>True if feature/value pair is present, false otherwise</returns>
        </member>
        <member name="M:LAIR.MachineLearning.FeatureSpaceRepresentation.MemoryFeatureSpace.GetNumericFeatureValueRange(LAIR.MachineLearning.NumericFeature,System.Single@,System.Single@)">
            <summary>
            Gets the range of a numeric feature value
            </summary>
            <param name="numericFeature">Numeric feature to get range for</param>
            <param name="rangeMinimum">Minimum value of range</param>
            <param name="rangeMaximum">Maximum value of range</param>
        </member>
        <member name="M:LAIR.MachineLearning.FeatureSpaceRepresentation.MemoryFeatureSpace.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets enumerator over features in this space
            </summary>
            <returns>Enumerator over features in this space</returns>
        </member>
        <member name="M:LAIR.MachineLearning.FeatureSpaceRepresentation.MemoryFeatureSpace.System#Collections#Generic#IEnumerable{LAIR#MachineLearning#Feature}#GetEnumerator">
            <summary>
            Gets enumerator over features in this space
            </summary>
            <returns>Enumerator over features in this space</returns>
        </member>
        <member name="P:LAIR.MachineLearning.FeatureSpaceRepresentation.MemoryFeatureSpace.Count">
            <summary>
            Gets the number of features in this feature space
            </summary>
        </member>
        <member name="T:LAIR.MachineLearning.ClassifierWrappers.Weka.WekaFeatureVectorReader">
            <summary>
            Reads vector lines from an ARFF file
            </summary>
        </member>
        <member name="M:LAIR.MachineLearning.ClassifierWrappers.Weka.WekaFeatureVectorReader.GetVectors(System.String)">
            <summary>
            Gets feature vectors from an ARFF file
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
    </members>
</doc>
