<?xml version="1.0"?>
<doc>
    <assembly>
        <name>LAIR.IO</name>
    </assembly>
    <members>
        <member name="T:LAIR.IO.BinarySearchTextStream">
            <summary>
            Represents a stream of text, the lines of which can be searched with a binary search algorithm. Any type of stream can be used
            allowing searches on-disk (using FileStream) or in-memory (using MemoryStream).
            </summary>
        </member>
        <member name="T:LAIR.IO.SearchTextStream">
            <summary>
            Represents a text stream, the lines of which can be searched.
            </summary>
        </member>
        <member name="M:LAIR.IO.SearchTextStream.#ctor(System.IO.Stream)">
            <summary>
            Constructor
            </summary>
            <param name="stream">Stream to search</param>
        </member>
        <member name="M:LAIR.IO.SearchTextStream.Search(System.String)">
            <summary>
            Searches for a key
            </summary>
            <param name="key">Key to search for</param>
            <returns>Line matching key, or null if key was not found</returns>
        </member>
        <member name="M:LAIR.IO.SearchTextStream.Search(System.String,System.Int64,System.Int64)">
            <summary>
            Searches for a key within a specified byte range
            </summary>
            <param name="key">Key to search for</param>
            <param name="start">Start of byte range</param>
            <param name="end">End of byte range</param>
            <returns>Line matching key</returns>
        </member>
        <member name="M:LAIR.IO.SearchTextStream.CheckSearchRange(System.Int64,System.Int64)">
            <summary>
            Checks the search range
            </summary>
            <param name="start">Start of range</param>
            <param name="end">End of range</param>
        </member>
        <member name="M:LAIR.IO.SearchTextStream.Close">
            <summary>
            Closes this search stream and releases all resources
            </summary>
        </member>
        <member name="M:LAIR.IO.SearchTextStream.ReInitialize(System.IO.Stream)">
            <summary>
            Re-initializes this search stream with a new stream
            </summary>
            <param name="stream">Stream to initialize with</param>
        </member>
        <member name="P:LAIR.IO.SearchTextStream.Stream">
            <summary>
            Gets the stream searched by this instance
            </summary>
        </member>
        <member name="M:LAIR.IO.BinarySearchTextStream.#ctor(System.IO.Stream,LAIR.IO.BinarySearchTextStream.SearchComparisonDelegate)">
            <summary>
            Constructor
            </summary>
            <param name="stream">Stream to search</param>
            <param name="searchComparison">Search comparison function</param>
        </member>
        <member name="M:LAIR.IO.BinarySearchTextStream.#ctor(System.String,LAIR.IO.BinarySearchTextStream.SearchComparisonDelegate)">
            <summary>
            Constructor
            </summary>
            <param name="path">Path to file for which to create a search stream</param>
            <param name="searchComparison">Search comparison function</param>
        </member>
        <member name="M:LAIR.IO.BinarySearchTextStream.Search(System.String,System.Int64,System.Int64)">
            <summary>
            Searches a range in the stream
            </summary>
            <param name="key">Search key</param>
            <param name="start">Start byte position of search</param>
            <param name="end">End byte position of search</param>
            <returns>Desired line, or null if none was found</returns>
        </member>
        <member name="T:LAIR.IO.BinarySearchTextStream.SearchComparisonDelegate">
            <summary>
            Delegate for functions that direct the search by comparing the current line to the desired line. The return value
            of such a function should be -1 if the desired line comes before the current line, 1 if the desired line comes
            after the current line, and 0 if the current line is the desired line.
            </summary>
            <param name="key">Search key</param>
            <param name="currentLine">Current line in the stream</param>
            <returns>Described in summary</returns>
        </member>
        <member name="T:LAIR.IO.HashSearchTextStream">
            <summary>
            Represents a text stream, the lines of which can be searched with a hashing search algorithm. In the hashing search algorithm,
            each line is mapped to a hash code. The hash code for a line is mapped to the line's position in the file. To check whether a
            line is present, one need only compute the hash of the queried line and read the file at the given position. Because of hash
            collisions, one might need to read multiple lines.
            </summary>
        </member>
        <member name="M:LAIR.IO.HashSearchTextStream.#ctor(System.IO.Stream,LAIR.IO.HashSearchTextStream.HashProviderDelegate,LAIR.IO.HashSearchTextStream.MatchProviderDelegate)">
            <summary>
            Constructor
            </summary>
            <param name="stream">Stream of text to search</param>
            <param name="hashProvider">Hash provider</param>
            <param name="matchProvider">Match provider</param>
        </member>
        <member name="M:LAIR.IO.HashSearchTextStream.#ctor(System.String,LAIR.IO.HashSearchTextStream.HashProviderDelegate,LAIR.IO.HashSearchTextStream.MatchProviderDelegate)">
            <summary>
            Constructor
            </summary>
            <param name="path">Path to file for which to create a search stream</param>
            <param name="hashProvider">Hash provider</param>
            <param name="matchProvider">Match provider</param>
        </member>
        <member name="M:LAIR.IO.HashSearchTextStream.Initialize">
            <summary>
            Initializes this search using the current stream
            </summary>
        </member>
        <member name="M:LAIR.IO.HashSearchTextStream.ReInitialize(System.IO.Stream)">
            <summary>
            Re-initializes this search stream with a new stream
            </summary>
            <param name="stream">Stream to initialize with</param>
        </member>
        <member name="M:LAIR.IO.HashSearchTextStream.Search(System.String,System.Int64,System.Int64)">
            <summary>
            Searches for a key within a specified byte range
            </summary>
            <param name="key">Key to search for</param>
            <param name="start">Start of byte range</param>
            <param name="end">End of byte range</param>
            <returns>Line matching key</returns>
        </member>
        <member name="M:LAIR.IO.HashSearchTextStream.Close">
            <summary>
            Closes this search and releases all resources
            </summary>
        </member>
        <member name="T:LAIR.IO.HashSearchTextStream.HashType">
            <summary>
            Types of hashes requested
            </summary>
        </member>
        <member name="F:LAIR.IO.HashSearchTextStream.HashType.Index">
            <summary>
            Requesting a hash to create the initial index
            </summary>
        </member>
        <member name="F:LAIR.IO.HashSearchTextStream.HashType.Search">
            <summary>
            Requesting a hash to perform a search
            </summary>
        </member>
        <member name="T:LAIR.IO.HashSearchTextStream.HashProviderDelegate">
            <summary>
            Delegate for functions that provide hash codes
            </summary>
            <param name="toHash">String to get hash code for</param>
            <param name="action">Type of hashing action performed</param>
            <param name="hashCode">Hash code (output)</param>
            <returns>True if hash should be used, false otherwise</returns>
        </member>
        <member name="T:LAIR.IO.HashSearchTextStream.MatchProviderDelegate">
            <summary>
            Delegate for functions that check whether a line matches the search criteria
            </summary>
            <param name="key">Key being searched for</param>
            <param name="currentLine">Current line in file</param>
            <returns>True if line matches, false otherwise</returns>
        </member>
        <member name="T:LAIR.IO.Directory">
            <summary>
            Provides additional filesystem routines
            </summary>
        </member>
        <member name="M:LAIR.IO.Directory.GetNumberedPaths(System.String,System.String,System.String[])">
            <summary>
            Gets numbered list of paths in a directory. Each path in given directory must contain exactly one integer.
            </summary>
            <param name="directory">Path to directory</param>
            <param name="pattern">Pattern for files to match</param>
            <param name="excludeEndings">File endings to exclude from the returned paths</param>
            <returns>List of paths, indexed by number</returns>
        </member>
        <member name="M:LAIR.IO.Directory.CombineNumberedFiles(System.String,System.String,System.Boolean)">
            <summary>
            Combines numbered files into a single file
            </summary>
            <param name="directory">Path to directory containing files to combine</param>
            <param name="outputPath">Path to output file</param>
            <param name="ignoreBlankLines">Whether or not to ignore blank lines</param>
        </member>
    </members>
</doc>
